"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-datepicker";
exports.ids = ["vendor-chunks/react-datepicker"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-datepicker/dist/es/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-datepicker/dist/es/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CalendarContainer: () => (/* binding */ CalendarContainer),\n/* harmony export */   \"default\": () => (/* binding */ DatePicker),\n/* harmony export */   getDefaultLocale: () => (/* binding */ getDefaultLocale),\n/* harmony export */   registerLocale: () => (/* binding */ registerLocale),\n/* harmony export */   setDefaultLocale: () => (/* binding */ setDefaultLocale)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-onclickoutside */ \"(ssr)/./node_modules/react-onclickoutside/dist/react-onclickoutside.es.js\");\n/* harmony import */ var date_fns_addDays__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! date-fns/addHours */ \"(ssr)/./node_modules/date-fns/addHours.mjs\");\n/* harmony import */ var date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! date-fns/addMinutes */ \"(ssr)/./node_modules/date-fns/addMinutes.mjs\");\n/* harmony import */ var date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! date-fns/addMonths */ \"(ssr)/./node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! date-fns/addQuarters */ \"(ssr)/./node_modules/date-fns/addQuarters.mjs\");\n/* harmony import */ var date_fns_addSeconds__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! date-fns/addSeconds */ \"(ssr)/./node_modules/date-fns/addSeconds.mjs\");\n/* harmony import */ var date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! date-fns/addWeeks */ \"(ssr)/./node_modules/date-fns/addWeeks.mjs\");\n/* harmony import */ var date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! date-fns/addYears */ \"(ssr)/./node_modules/date-fns/addYears.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/./node_modules/date-fns/differenceInCalendarDays.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! date-fns/differenceInCalendarMonths */ \"(ssr)/./node_modules/date-fns/differenceInCalendarMonths.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! date-fns/differenceInCalendarQuarters */ \"(ssr)/./node_modules/date-fns/differenceInCalendarQuarters.mjs\");\n/* harmony import */ var date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! date-fns/differenceInCalendarYears */ \"(ssr)/./node_modules/date-fns/differenceInCalendarYears.mjs\");\n/* harmony import */ var date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/./node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/./node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! date-fns/endOfYear */ \"(ssr)/./node_modules/date-fns/endOfYear.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/_lib/format/longFormatters.mjs\");\n/* harmony import */ var date_fns_format__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/format.mjs\");\n/* harmony import */ var date_fns_getDate__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! date-fns/getDate */ \"(ssr)/./node_modules/date-fns/getDate.mjs\");\n/* harmony import */ var date_fns_getDay__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! date-fns/getDay */ \"(ssr)/./node_modules/date-fns/getDay.mjs\");\n/* harmony import */ var date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! date-fns/getHours */ \"(ssr)/./node_modules/date-fns/getHours.mjs\");\n/* harmony import */ var date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns/getISOWeek */ \"(ssr)/./node_modules/date-fns/getISOWeek.mjs\");\n/* harmony import */ var date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! date-fns/getMinutes */ \"(ssr)/./node_modules/date-fns/getMinutes.mjs\");\n/* harmony import */ var date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! date-fns/getMonth */ \"(ssr)/./node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! date-fns/getQuarter */ \"(ssr)/./node_modules/date-fns/getQuarter.mjs\");\n/* harmony import */ var date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! date-fns/getSeconds */ \"(ssr)/./node_modules/date-fns/getSeconds.mjs\");\n/* harmony import */ var date_fns_getTime__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! date-fns/getTime */ \"(ssr)/./node_modules/date-fns/getTime.mjs\");\n/* harmony import */ var date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns/getYear */ \"(ssr)/./node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! date-fns/isAfter */ \"(ssr)/./node_modules/date-fns/isAfter.mjs\");\n/* harmony import */ var date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns/isBefore */ \"(ssr)/./node_modules/date-fns/isBefore.mjs\");\n/* harmony import */ var date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! date-fns/isDate */ \"(ssr)/./node_modules/date-fns/isDate.mjs\");\n/* harmony import */ var date_fns_isEqual__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns/isEqual */ \"(ssr)/./node_modules/date-fns/isEqual.mjs\");\n/* harmony import */ var date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns/isSameMonth */ \"(ssr)/./node_modules/date-fns/isSameMonth.mjs\");\n/* harmony import */ var date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns/isSameQuarter */ \"(ssr)/./node_modules/date-fns/isSameQuarter.mjs\");\n/* harmony import */ var date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns/isSameYear */ \"(ssr)/./node_modules/date-fns/isSameYear.mjs\");\n/* harmony import */ var date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns/isValid */ \"(ssr)/./node_modules/date-fns/isValid.mjs\");\n/* harmony import */ var date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns/isWithinInterval */ \"(ssr)/./node_modules/date-fns/isWithinInterval.mjs\");\n/* harmony import */ var date_fns_max__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! date-fns/max */ \"(ssr)/./node_modules/date-fns/max.mjs\");\n/* harmony import */ var date_fns_min__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! date-fns/min */ \"(ssr)/./node_modules/date-fns/min.mjs\");\n/* harmony import */ var date_fns_parse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/parse */ \"(ssr)/./node_modules/date-fns/parse.mjs\");\n/* harmony import */ var date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns/parseISO */ \"(ssr)/./node_modules/date-fns/parseISO.mjs\");\n/* harmony import */ var date_fns_set__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! date-fns/set */ \"(ssr)/./node_modules/date-fns/set.mjs\");\n/* harmony import */ var date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns/setHours */ \"(ssr)/./node_modules/date-fns/setHours.mjs\");\n/* harmony import */ var date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/setMinutes */ \"(ssr)/./node_modules/date-fns/setMinutes.mjs\");\n/* harmony import */ var date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns/setMonth */ \"(ssr)/./node_modules/date-fns/setMonth.mjs\");\n/* harmony import */ var date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns/setQuarter */ \"(ssr)/./node_modules/date-fns/setQuarter.mjs\");\n/* harmony import */ var date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! date-fns/setSeconds */ \"(ssr)/./node_modules/date-fns/setSeconds.mjs\");\n/* harmony import */ var date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! date-fns/setYear */ \"(ssr)/./node_modules/date-fns/setYear.mjs\");\n/* harmony import */ var date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/./node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/./node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns/startOfQuarter */ \"(ssr)/./node_modules/date-fns/startOfQuarter.mjs\");\n/* harmony import */ var date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns/startOfYear */ \"(ssr)/./node_modules/date-fns/startOfYear.mjs\");\n/* harmony import */ var date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! date-fns/subDays */ \"(ssr)/./node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! date-fns/subMonths */ \"(ssr)/./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! date-fns/subQuarters */ \"(ssr)/./node_modules/date-fns/subQuarters.mjs\");\n/* harmony import */ var date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! date-fns/subWeeks */ \"(ssr)/./node_modules/date-fns/subWeeks.mjs\");\n/* harmony import */ var date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! date-fns/subYears */ \"(ssr)/./node_modules/date-fns/subYears.mjs\");\n/* harmony import */ var date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns/toDate */ \"(ssr)/./node_modules/date-fns/toDate.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_3__);\n/*!\n  react-datepicker v7.1.0\n  https://github.com/Hacker0x01/react-datepicker\n  Released under the MIT License.\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return _extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  _extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return _assign.apply(this, arguments);\n};\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nvar CalendarContainer = function (_a) {\n    var _b = _a.showTimeSelectOnly, showTimeSelectOnly = _b === void 0 ? false : _b, _c = _a.showTime, showTime = _c === void 0 ? false : _c, className = _a.className, children = _a.children;\n    var ariaLabel = showTimeSelectOnly\n        ? \"Choose Time\"\n        : \"Choose Date\".concat(showTime ? \" and Time\" : \"\");\n    return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: className, role: \"dialog\", \"aria-label\": ariaLabel, \"aria-modal\": \"true\" }, children));\n};\n\nvar KeyType;\n(function (KeyType) {\n    KeyType[\"ArrowUp\"] = \"ArrowUp\";\n    KeyType[\"ArrowDown\"] = \"ArrowDown\";\n    KeyType[\"ArrowLeft\"] = \"ArrowLeft\";\n    KeyType[\"ArrowRight\"] = \"ArrowRight\";\n    KeyType[\"PageUp\"] = \"PageUp\";\n    KeyType[\"PageDown\"] = \"PageDown\";\n    KeyType[\"Home\"] = \"Home\";\n    KeyType[\"End\"] = \"End\";\n    KeyType[\"Enter\"] = \"Enter\";\n    KeyType[\"Space\"] = \" \";\n    KeyType[\"Tab\"] = \"Tab\";\n    KeyType[\"Escape\"] = \"Escape\";\n    KeyType[\"Backspace\"] = \"Backspace\";\n    KeyType[\"X\"] = \"x\";\n})(KeyType || (KeyType = {}));\nfunction getLocaleScope() {\n    // Use this cast to avoid messing with users globalThis (like window) and the rest of keys in the globalThis object we don't care about\n    var scope = (typeof window !== \"undefined\"\n        ? window\n        : globalThis);\n    return scope;\n}\nvar DEFAULT_YEAR_ITEM_NUMBER = 12;\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n// ** Date Constructors **\nfunction newDate(value) {\n    if (value == null) {\n        return new Date();\n    }\n    var d = typeof value === \"string\" ? (0,date_fns_parseISO__WEBPACK_IMPORTED_MODULE_4__.parseISO)(value) : (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(value);\n    return isValid(d) ? d : new Date();\n}\n/**\n * Parses a date.\n *\n * @param value - The string representing the Date in a parsable form, e.g., ISO 1861\n * @param dateFormat - The date format.\n * @param locale - The locale.\n * @param strictParsing - The strict parsing flag.\n * @param minDate - The minimum date.\n * @returns - The parsed date or null.\n */\nfunction parseDate(value, dateFormat, locale, strictParsing, minDate) {\n    var _a;\n    var parsedDate = null;\n    var localeObject = getLocaleObject(locale) || getLocaleObject(getDefaultLocale());\n    var strictParsingValueMatch = true;\n    if (Array.isArray(dateFormat)) {\n        dateFormat.forEach(function (df) {\n            var tryParseDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, df, new Date(), {\n                locale: localeObject,\n                useAdditionalWeekYearTokens: true,\n                useAdditionalDayOfYearTokens: true,\n            });\n            if (strictParsing) {\n                strictParsingValueMatch =\n                    isValid(tryParseDate, minDate) &&\n                        value === formatDate(tryParseDate, df, locale);\n            }\n            if (isValid(tryParseDate, minDate) && strictParsingValueMatch) {\n                parsedDate = tryParseDate;\n            }\n        });\n        return parsedDate;\n    }\n    parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, dateFormat, new Date(), {\n        locale: localeObject,\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true,\n    });\n    if (strictParsing) {\n        strictParsingValueMatch =\n            isValid(parsedDate) &&\n                value === formatDate(parsedDate, dateFormat, locale);\n    }\n    else if (!isValid(parsedDate)) {\n        var format_1 = ((_a = dateFormat.match(longFormattingTokensRegExp)) !== null && _a !== void 0 ? _a : [])\n            .map(function (substring) {\n            var firstCharacter = substring[0];\n            if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n                // The type in date-fns is `Record<string, LongFormatter>` so we can do our firstCharacter a bit loos but I don't think that this is a good idea\n                var longFormatter = date_fns_format__WEBPACK_IMPORTED_MODULE_7__.longFormatters[firstCharacter];\n                return localeObject\n                    ? longFormatter(substring, localeObject.formatLong)\n                    : firstCharacter;\n            }\n            return substring;\n        })\n            .join(\"\");\n        if (value.length > 0) {\n            parsedDate = (0,date_fns_parse__WEBPACK_IMPORTED_MODULE_6__.parse)(value, format_1.slice(0, value.length), new Date(), {\n                useAdditionalWeekYearTokens: true,\n                useAdditionalDayOfYearTokens: true,\n            });\n        }\n        if (!isValid(parsedDate)) {\n            parsedDate = new Date(value);\n        }\n    }\n    return isValid(parsedDate) && strictParsingValueMatch ? parsedDate : null;\n}\n/**\n * Checks if a given date is valid and not before the minimum date.\n * @param date - The date to be checked.\n * @param minDate - The minimum date allowed. If not provided, defaults to \"1/1/1800\".\n * @returns A boolean value indicating whether the date is valid and not before the minimum date.\n */\nfunction isValid(date, minDate) {\n    /* the fallback date is essential to not break test case\n     * `should auto update calendar when the updated date text is after props.minDate`\n     * and backward compatibility respectfully\n     */\n    return (0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(date) && !(0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, minDate !== null && minDate !== void 0 ? minDate : new Date(\"1/1/1800\"));\n}\n// ** Date Formatting **\n/**\n * Formats a date.\n *\n * @param date - The date.\n * @param formatStr - The format string.\n * @param locale - The locale.\n * @returns - The formatted date.\n */\nfunction formatDate(date, formatStr, locale) {\n    if (locale === \"en\") {\n        return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n            useAdditionalWeekYearTokens: true,\n            useAdditionalDayOfYearTokens: true,\n        });\n    }\n    var localeObj = locale ? getLocaleObject(locale) : undefined;\n    if (locale && !localeObj) {\n        console.warn(\"A locale object was not found for the provided string [\\\"\".concat(locale, \"\\\"].\"));\n    }\n    if (!localeObj &&\n        !!getDefaultLocale() &&\n        !!getLocaleObject(getDefaultLocale())) {\n        localeObj = getLocaleObject(getDefaultLocale());\n    }\n    return (0,date_fns_format__WEBPACK_IMPORTED_MODULE_10__.format)(date, formatStr, {\n        locale: localeObj,\n        useAdditionalWeekYearTokens: true,\n        useAdditionalDayOfYearTokens: true,\n    });\n}\n/**\n * Safely formats a date.\n *\n * @param date - The date.\n * @param options - An object containing the dateFormat and locale.\n * @returns - The formatted date or an empty string.\n */\nfunction safeDateFormat(date, _a) {\n    var dateFormat = _a.dateFormat, locale = _a.locale;\n    var formatStr = (Array.isArray(dateFormat) && dateFormat.length > 0\n        ? dateFormat[0]\n        : dateFormat); // Cast to string because it's impossible to get `string | string[] | undefined` here and typescript doesn't know that\n    return (date && formatDate(date, formatStr, locale)) || \"\";\n}\n/**\n * Safely formats a date range.\n *\n * @param startDate - The start date.\n * @param endDate - The end date.\n * @param props - The props.\n * @returns - The formatted date range or an empty string.\n */\nfunction safeDateRangeFormat(startDate, endDate, props) {\n    if (!startDate) {\n        return \"\";\n    }\n    var formattedStartDate = safeDateFormat(startDate, props);\n    var formattedEndDate = endDate ? safeDateFormat(endDate, props) : \"\";\n    return \"\".concat(formattedStartDate, \" - \").concat(formattedEndDate);\n}\n/**\n * Safely formats multiple dates.\n *\n * @param dates - The dates.\n * @param props - The props.\n * @returns - The formatted dates or an empty string.\n */\nfunction safeMultipleDatesFormat(dates, props) {\n    if (!(dates === null || dates === void 0 ? void 0 : dates.length)) {\n        return \"\";\n    }\n    var formattedFirstDate = dates[0] ? safeDateFormat(dates[0], props) : \"\";\n    if (dates.length === 1) {\n        return formattedFirstDate;\n    }\n    if (dates.length === 2 && dates[1]) {\n        var formattedSecondDate = safeDateFormat(dates[1], props);\n        return \"\".concat(formattedFirstDate, \", \").concat(formattedSecondDate);\n    }\n    var extraDatesCount = dates.length - 1;\n    return \"\".concat(formattedFirstDate, \" (+\").concat(extraDatesCount, \")\");\n}\n// ** Date Setters **\n/**\n * Sets the time for a given date.\n *\n * @param date - The date.\n * @param time - An object containing the hour, minute, and second.\n * @returns - The date with the time set.\n */\nfunction setTime(date, _a) {\n    var _b = _a.hour, hour = _b === void 0 ? 0 : _b, _c = _a.minute, minute = _c === void 0 ? 0 : _c, _d = _a.second, second = _d === void 0 ? 0 : _d;\n    return (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)((0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)((0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(date, second), minute), hour);\n}\n/**\n * Gets the week of the year for a given date.\n *\n * @param date - The date.\n * @returns - The week of the year.\n */\nfunction getWeek(date) {\n    return (0,date_fns_getISOWeek__WEBPACK_IMPORTED_MODULE_14__.getISOWeek)(date);\n}\n/**\n * Gets the day of the week code for a given day.\n *\n * @param day - The day.\n * @param locale - The locale.\n * @returns - The day of the week code.\n */\nfunction getDayOfWeekCode(day, locale) {\n    return formatDate(day, \"ddd\", locale);\n}\n// *** Start of ***\n/**\n * Gets the start of the day for a given date.\n *\n * @param date - The date.\n * @returns - The start of the day.\n */\nfunction getStartOfDay(date) {\n    return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(date);\n}\n/**\n * Gets the start of the week for a given date.\n *\n * @param date - The date.\n * @param locale - The locale.\n * @param calendarStartDay - The day the calendar starts on.\n * @returns - The start of the week.\n */\nfunction getStartOfWeek(date, locale, calendarStartDay) {\n    var localeObj = locale\n        ? getLocaleObject(locale)\n        : getLocaleObject(getDefaultLocale());\n    return (0,date_fns_startOfWeek__WEBPACK_IMPORTED_MODULE_16__.startOfWeek)(date, {\n        locale: localeObj,\n        weekStartsOn: calendarStartDay,\n    });\n}\n/**\n * Gets the start of the month for a given date.\n *\n * @param date - The date.\n * @returns - The start of the month.\n */\nfunction getStartOfMonth(date) {\n    return (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(date);\n}\n/**\n * Gets the start of the year for a given date.\n *\n * @param date - The date.\n * @returns - The start of the year.\n */\nfunction getStartOfYear(date) {\n    return (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n}\n/**\n * Gets the start of the quarter for a given date.\n *\n * @param date - The date.\n * @returns - The start of the quarter.\n */\nfunction getStartOfQuarter(date) {\n    return (0,date_fns_startOfQuarter__WEBPACK_IMPORTED_MODULE_19__.startOfQuarter)(date);\n}\n/**\n * Gets the start of today.\n *\n * @returns - The start of today.\n */\nfunction getStartOfToday() {\n    return (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(newDate());\n}\n// *** End of ***\n/**\n * Gets the end of the day for a given date.\n *\n * @param date - The date.\n * @returns - The end of the day.\n */\nfunction getEndOfDay(date) {\n    return (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_20__.endOfDay)(date);\n}\n/**\n * Gets the end of the week for a given date.\n *\n * @param date - The date.\n * @returns - The end of the week.\n */\nfunction getEndOfWeek(date) {\n    return (0,date_fns_endOfWeek__WEBPACK_IMPORTED_MODULE_21__.endOfWeek)(date);\n}\n/**\n * Checks if two dates are in the same year.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are in the same year, false otherwise.\n */\nfunction isSameYear(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameYear__WEBPACK_IMPORTED_MODULE_22__.isSameYear)(date1, date2);\n    }\n    else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are in the same month.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are in the same month, false otherwise.\n */\nfunction isSameMonth(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameMonth__WEBPACK_IMPORTED_MODULE_23__.isSameMonth)(date1, date2);\n    }\n    else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are in the same quarter.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are in the same quarter, false otherwise.\n */\nfunction isSameQuarter(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameQuarter__WEBPACK_IMPORTED_MODULE_24__.isSameQuarter)(date1, date2);\n    }\n    else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are on the same day.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are on the same day, false otherwise.\n */\nfunction isSameDay(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isSameDay__WEBPACK_IMPORTED_MODULE_25__.isSameDay)(date1, date2);\n    }\n    else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if two dates are equal.\n *\n * @param date1 - The first date.\n * @param date2 - The second date.\n * @returns - True if the dates are equal, false otherwise.\n */\nfunction isEqual(date1, date2) {\n    if (date1 && date2) {\n        return (0,date_fns_isEqual__WEBPACK_IMPORTED_MODULE_26__.isEqual)(date1, date2);\n    }\n    else {\n        return !date1 && !date2;\n    }\n}\n/**\n * Checks if a day is within a date range.\n *\n * @param day - The day to check.\n * @param startDate - The start date of the range.\n * @param endDate - The end date of the range.\n * @returns - True if the day is within the range, false otherwise.\n */\nfunction isDayInRange(day, startDate, endDate) {\n    var valid;\n    var start = (0,date_fns_startOfDay__WEBPACK_IMPORTED_MODULE_15__.startOfDay)(startDate);\n    var end = (0,date_fns_endOfDay__WEBPACK_IMPORTED_MODULE_20__.endOfDay)(endDate);\n    try {\n        valid = (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, { start: start, end: end });\n    }\n    catch (err) {\n        valid = false;\n    }\n    return valid;\n}\n// ** Date Localization **\n/**\n * Registers a locale.\n *\n * @param localeName - The name of the locale.\n * @param localeData - The data of the locale.\n */\nfunction registerLocale(localeName, localeData) {\n    var scope = getLocaleScope();\n    if (!scope.__localeData__) {\n        scope.__localeData__ = {};\n    }\n    scope.__localeData__[localeName] = localeData;\n}\n/**\n * Sets the default locale.\n *\n * @param localeName - The name of the locale.\n */\nfunction setDefaultLocale(localeName) {\n    var scope = getLocaleScope();\n    scope.__localeId__ = localeName;\n}\n/**\n * Gets the default locale.\n *\n * @returns - The default locale.\n */\nfunction getDefaultLocale() {\n    var scope = getLocaleScope();\n    return scope.__localeId__;\n}\n/**\n * Gets the locale object.\n *\n * @param localeSpec - The locale specification.\n * @returns - The locale object.\n */\nfunction getLocaleObject(localeSpec) {\n    if (typeof localeSpec === \"string\") {\n        // Treat it as a locale name registered by registerLocale\n        var scope = getLocaleScope();\n        // Null was replaced with undefined to avoid type coercion\n        return scope.__localeData__ ? scope.__localeData__[localeSpec] : undefined;\n    }\n    else {\n        // Treat it as a raw date-fns locale object\n        return localeSpec;\n    }\n}\n/**\n * Formats the weekday in a given locale.\n *\n * @param date - The date to format.\n * @param formatFunc - The formatting function.\n * @param locale - The locale to use for formatting.\n * @returns - The formatted weekday.\n */\nfunction getFormattedWeekdayInLocale(date, formatFunc, locale) {\n    return formatFunc(formatDate(date, \"EEEE\", locale));\n}\n/**\n * Gets the minimum weekday in a given locale.\n *\n * @param date - The date to format.\n * @param locale - The locale to use for formatting.\n * @returns - The minimum weekday.\n */\nfunction getWeekdayMinInLocale(date, locale) {\n    return formatDate(date, \"EEEEEE\", locale);\n}\n/**\n * Gets the short weekday in a given locale.\n *\n * @param date - The date to format.\n * @param locale - The locale to use for formatting.\n * @returns - The short weekday.\n */\nfunction getWeekdayShortInLocale(date, locale) {\n    return formatDate(date, \"EEE\", locale);\n}\n/**\n * Gets the month in a given locale.\n *\n * @param month - The month to format.\n * @param locale - The locale to use for formatting.\n * @returns - The month.\n */\nfunction getMonthInLocale(month, locale) {\n    return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLLL\", locale);\n}\n/**\n * Gets the short month in a given locale.\n *\n * @param month - The month to format.\n * @param locale - The locale to use for formatting.\n * @returns - The short month.\n */\nfunction getMonthShortInLocale(month, locale) {\n    return formatDate((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(newDate(), month), \"LLL\", locale);\n}\n/**\n * Gets the short quarter in a given locale.\n *\n * @param quarter - The quarter to format.\n * @param locale - The locale to use for formatting.\n * @returns - The short quarter.\n */\nfunction getQuarterShortInLocale(quarter, locale) {\n    return formatDate((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(newDate(), quarter), \"QQQ\", locale);\n}\n/**\n * Checks if a day is disabled.\n *\n * @param day - The day to check.\n * @param options - The options to consider when checking.\n * @returns - Returns true if the day is disabled, false otherwise.\n */\nfunction isDayDisabled(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, excludeDateIntervals = _b.excludeDateIntervals, includeDates = _b.includeDates, includeDateIntervals = _b.includeDateIntervals, filterDate = _b.filterDate;\n    return (isOutOfBounds(day, { minDate: minDate, maxDate: maxDate }) ||\n        (excludeDates &&\n            excludeDates.some(function (excludeDate) {\n                var _a;\n                if (excludeDate instanceof Date) {\n                    return isSameDay(day, excludeDate);\n                }\n                else {\n                    return isSameDay(day, (_a = excludeDate.date) !== null && _a !== void 0 ? _a : new Date());\n                }\n            })) ||\n        (excludeDateIntervals &&\n            excludeDateIntervals.some(function (_a) {\n                var start = _a.start, end = _a.end;\n                return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, { start: start, end: end });\n            })) ||\n        (includeDates &&\n            !includeDates.some(function (includeDate) { return isSameDay(day, includeDate); })) ||\n        (includeDateIntervals &&\n            !includeDateIntervals.some(function (_a) {\n                var start = _a.start, end = _a.end;\n                return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, { start: start, end: end });\n            })) ||\n        (filterDate && !filterDate(newDate(day))) ||\n        false);\n}\n/**\n * Checks if a day is excluded.\n *\n * @param day - The day to check.\n * @param options - The options to consider when checking.\n * @returns - Returns true if the day is excluded, false otherwise.\n */\nfunction isDayExcluded(day, _a) {\n    var _b = _a === void 0 ? {} : _a, excludeDates = _b.excludeDates, excludeDateIntervals = _b.excludeDateIntervals;\n    if (excludeDateIntervals && excludeDateIntervals.length > 0) {\n        return excludeDateIntervals.some(function (_a) {\n            var start = _a.start, end = _a.end;\n            return (0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(day, { start: start, end: end });\n        });\n    }\n    return ((excludeDates &&\n        excludeDates.some(function (excludeDate) {\n            var _a;\n            if (excludeDate instanceof Date) {\n                return isSameDay(day, excludeDate);\n            }\n            else {\n                return isSameDay(day, (_a = excludeDate.date) !== null && _a !== void 0 ? _a : new Date());\n            }\n        })) ||\n        false);\n}\nfunction isMonthDisabled(month, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates, filterDate = _b.filterDate;\n    return (isOutOfBounds(month, {\n        minDate: minDate ? (0,date_fns_startOfMonth__WEBPACK_IMPORTED_MODULE_17__.startOfMonth)(minDate) : undefined,\n        maxDate: maxDate ? (0,date_fns_endOfMonth__WEBPACK_IMPORTED_MODULE_30__.endOfMonth)(maxDate) : undefined,\n    }) ||\n        (excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.some(function (excludeDate) {\n            return isSameMonth(month, excludeDate instanceof Date ? excludeDate : excludeDate.date);\n        })) ||\n        (includeDates &&\n            !includeDates.some(function (includeDate) { return isSameMonth(month, includeDate); })) ||\n        (filterDate && !filterDate(newDate(month))) ||\n        false);\n}\nfunction isMonthInRange(startDate, endDate, m, day) {\n    var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n    var startDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(startDate);\n    var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n    var endDateMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(endDate);\n    var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n    if (startDateYear === endDateYear && startDateYear === dayYear) {\n        return startDateMonth <= m && m <= endDateMonth;\n    }\n    else if (startDateYear < endDateYear) {\n        return ((dayYear === startDateYear && startDateMonth <= m) ||\n            (dayYear === endDateYear && endDateMonth >= m) ||\n            (dayYear < endDateYear && dayYear > startDateYear));\n    }\n    return false;\n}\n/**\n * To check if a date's month and year are disabled/excluded\n * @param date Date to check\n * @returns {boolean} true if month and year are disabled/excluded, false otherwise\n */\nfunction isMonthYearDisabled(date, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates;\n    return (isOutOfBounds(date, { minDate: minDate, maxDate: maxDate }) ||\n        (excludeDates &&\n            excludeDates.some(function (excludedDate) {\n                return isSameMonth(excludedDate instanceof Date ? excludedDate : excludedDate.date, date);\n            })) ||\n        (includeDates &&\n            !includeDates.some(function (includedDate) { return isSameMonth(includedDate, date); })) ||\n        false);\n}\nfunction isQuarterDisabled(quarter, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates, filterDate = _b.filterDate;\n    return (isOutOfBounds(quarter, { minDate: minDate, maxDate: maxDate }) ||\n        (excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.some(function (excludeDate) {\n            return isSameQuarter(quarter, excludeDate instanceof Date ? excludeDate : excludeDate.date);\n        })) ||\n        (includeDates &&\n            !includeDates.some(function (includeDate) {\n                return isSameQuarter(quarter, includeDate);\n            })) ||\n        (filterDate && !filterDate(newDate(quarter))) ||\n        false);\n}\nfunction isYearInRange(year, start, end) {\n    if (!start || !end)\n        return false;\n    if (!(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(start) || !(0,date_fns_isValid__WEBPACK_IMPORTED_MODULE_8__.isValid)(end))\n        return false;\n    var startYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(start);\n    var endYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(end);\n    return startYear <= year && endYear >= year;\n}\nfunction isYearDisabled(year, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates, filterDate = _b.filterDate;\n    var date = new Date(year, 0, 1);\n    return (isOutOfBounds(date, {\n        minDate: minDate ? (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(minDate) : undefined,\n        maxDate: maxDate ? (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(maxDate) : undefined,\n    }) ||\n        (excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.some(function (excludeDate) {\n            return isSameYear(date, excludeDate instanceof Date ? excludeDate : excludeDate.date);\n        })) ||\n        (includeDates &&\n            !includeDates.some(function (includeDate) { return isSameYear(date, includeDate); })) ||\n        (filterDate && !filterDate(newDate(date))) ||\n        false);\n}\nfunction isQuarterInRange(startDate, endDate, q, day) {\n    var startDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(startDate);\n    var startDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(startDate);\n    var endDateYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(endDate);\n    var endDateQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(endDate);\n    var dayYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day);\n    if (startDateYear === endDateYear && startDateYear === dayYear) {\n        return startDateQuarter <= q && q <= endDateQuarter;\n    }\n    else if (startDateYear < endDateYear) {\n        return ((dayYear === startDateYear && startDateQuarter <= q) ||\n            (dayYear === endDateYear && endDateQuarter >= q) ||\n            (dayYear < endDateYear && dayYear > startDateYear));\n    }\n    return false;\n}\nfunction isOutOfBounds(day, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a, minDate = _c.minDate, maxDate = _c.maxDate;\n    return ((_b = ((minDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, minDate) < 0) ||\n        (maxDate && (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(day, maxDate) > 0))) !== null && _b !== void 0 ? _b : false);\n}\nfunction isTimeInList(time, times) {\n    return times.some(function (listTime) {\n        return (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(listTime) === (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) &&\n            (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(listTime) === (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) &&\n            (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(listTime) === (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time);\n    });\n}\nfunction isTimeDisabled(time, _a) {\n    var _b = _a === void 0 ? {} : _a, excludeTimes = _b.excludeTimes, includeTimes = _b.includeTimes, filterTime = _b.filterTime;\n    return ((excludeTimes && isTimeInList(time, excludeTimes)) ||\n        (includeTimes && !isTimeInList(time, includeTimes)) ||\n        (filterTime && !filterTime(time)) ||\n        false);\n}\nfunction isTimeInDisabledRange(time, _a) {\n    var minTime = _a.minTime, maxTime = _a.maxTime;\n    if (!minTime || !maxTime) {\n        throw new Error(\"Both minTime and maxTime props required\");\n    }\n    var baseTime = newDate();\n    baseTime = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(baseTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time));\n    baseTime = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(baseTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time));\n    baseTime = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(baseTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time));\n    var min = newDate();\n    min = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(min, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(minTime));\n    min = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(min, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(minTime));\n    min = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(min, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(minTime));\n    var max = newDate();\n    max = (0,date_fns_setHours__WEBPACK_IMPORTED_MODULE_11__.setHours)(max, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(maxTime));\n    max = (0,date_fns_setMinutes__WEBPACK_IMPORTED_MODULE_12__.setMinutes)(max, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(maxTime));\n    max = (0,date_fns_setSeconds__WEBPACK_IMPORTED_MODULE_13__.setSeconds)(max, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(maxTime));\n    var valid;\n    try {\n        valid = !(0,date_fns_isWithinInterval__WEBPACK_IMPORTED_MODULE_27__.isWithinInterval)(baseTime, { start: min, end: max });\n    }\n    catch (err) {\n        valid = false;\n    }\n    return valid;\n}\nfunction monthDisabledBefore(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, includeDates = _b.includeDates;\n    var previousMonth = (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(day, 1);\n    return ((minDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(minDate, previousMonth) > 0) ||\n        (includeDates &&\n            includeDates.every(function (includeDate) {\n                return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(includeDate, previousMonth) > 0;\n            })) ||\n        false);\n}\nfunction monthDisabledAfter(day, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, includeDates = _b.includeDates;\n    var nextMonth = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(day, 1);\n    return ((maxDate && (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, maxDate) > 0) ||\n        (includeDates &&\n            includeDates.every(function (includeDate) { return (0,date_fns_differenceInCalendarMonths__WEBPACK_IMPORTED_MODULE_40__.differenceInCalendarMonths)(nextMonth, includeDate) > 0; })) ||\n        false);\n}\nfunction quarterDisabledBefore(date, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, includeDates = _b.includeDates;\n    var firstDateOfYear = (0,date_fns_startOfYear__WEBPACK_IMPORTED_MODULE_18__.startOfYear)(date);\n    var previousQuarter = (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(firstDateOfYear, 1);\n    return ((minDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(minDate, previousQuarter) > 0) ||\n        (includeDates &&\n            includeDates.every(function (includeDate) {\n                return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(includeDate, previousQuarter) > 0;\n            })) ||\n        false);\n}\nfunction quarterDisabledAfter(date, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, includeDates = _b.includeDates;\n    var lastDateOfYear = (0,date_fns_endOfYear__WEBPACK_IMPORTED_MODULE_33__.endOfYear)(date);\n    var nextQuarter = (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(lastDateOfYear, 1);\n    return ((maxDate && (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, maxDate) > 0) ||\n        (includeDates &&\n            includeDates.every(function (includeDate) {\n                return (0,date_fns_differenceInCalendarQuarters__WEBPACK_IMPORTED_MODULE_43__.differenceInCalendarQuarters)(nextQuarter, includeDate) > 0;\n            })) ||\n        false);\n}\nfunction yearDisabledBefore(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, includeDates = _b.includeDates;\n    var previousYear = (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, 1);\n    return ((minDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(minDate, previousYear) > 0) ||\n        (includeDates &&\n            includeDates.every(function (includeDate) {\n                return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(includeDate, previousYear) > 0;\n            })) ||\n        false);\n}\nfunction yearsDisabledBefore(day, _a) {\n    var _b = _a === void 0 ? {} : _a, minDate = _b.minDate, _c = _b.yearItemNumber, yearItemNumber = _c === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _c;\n    var previousYear = getStartOfYear((0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(day, yearItemNumber));\n    var endPeriod = getYearsPeriod(previousYear, yearItemNumber).endPeriod;\n    var minDateYear = minDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate);\n    return (minDateYear && minDateYear > endPeriod) || false;\n}\nfunction yearDisabledAfter(day, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, includeDates = _b.includeDates;\n    var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, 1);\n    return ((maxDate && (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, maxDate) > 0) ||\n        (includeDates &&\n            includeDates.every(function (includeDate) { return (0,date_fns_differenceInCalendarYears__WEBPACK_IMPORTED_MODULE_46__.differenceInCalendarYears)(nextYear, includeDate) > 0; })) ||\n        false);\n}\nfunction yearsDisabledAfter(day, _a) {\n    var _b = _a === void 0 ? {} : _a, maxDate = _b.maxDate, _c = _b.yearItemNumber, yearItemNumber = _c === void 0 ? DEFAULT_YEAR_ITEM_NUMBER : _c;\n    var nextYear = (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(day, yearItemNumber);\n    var startPeriod = getYearsPeriod(nextYear, yearItemNumber).startPeriod;\n    var maxDateYear = maxDate && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate);\n    return (maxDateYear && maxDateYear < startPeriod) || false;\n}\nfunction getEffectiveMinDate(_a) {\n    var minDate = _a.minDate, includeDates = _a.includeDates;\n    if (includeDates && minDate) {\n        var minDates = includeDates.filter(function (includeDate) { return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, minDate) >= 0; });\n        return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(minDates);\n    }\n    else if (includeDates) {\n        return (0,date_fns_min__WEBPACK_IMPORTED_MODULE_48__.min)(includeDates);\n    }\n    else {\n        return minDate;\n    }\n}\nfunction getEffectiveMaxDate(_a) {\n    var maxDate = _a.maxDate, includeDates = _a.includeDates;\n    if (includeDates && maxDate) {\n        var maxDates = includeDates.filter(function (includeDate) { return (0,date_fns_differenceInCalendarDays__WEBPACK_IMPORTED_MODULE_35__.differenceInCalendarDays)(includeDate, maxDate) <= 0; });\n        return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(maxDates);\n    }\n    else if (includeDates) {\n        return (0,date_fns_max__WEBPACK_IMPORTED_MODULE_49__.max)(includeDates);\n    }\n    else {\n        return maxDate;\n    }\n}\n/**\n * Get a map of highlighted dates with their corresponding classes.\n * @param highlightDates The dates to highlight.\n * @param defaultClassName The default class to use for highlighting.\n * @returns A map with dates as keys and arrays of class names as values.\n */\nfunction getHighLightDaysMap(highlightDates, defaultClassName) {\n    var _a;\n    if (highlightDates === void 0) { highlightDates = []; }\n    if (defaultClassName === void 0) { defaultClassName = \"react-datepicker__day--highlighted\"; }\n    var dateClasses = new Map();\n    for (var i = 0, len = highlightDates.length; i < len; i++) {\n        var obj = highlightDates[i];\n        if ((0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(obj)) {\n            var key = formatDate(obj, \"MM.dd.yyyy\");\n            var classNamesArr = dateClasses.get(key) || [];\n            if (!classNamesArr.includes(defaultClassName)) {\n                classNamesArr.push(defaultClassName);\n                dateClasses.set(key, classNamesArr);\n            }\n        }\n        else if (typeof obj === \"object\") {\n            var keys = Object.keys(obj);\n            var className = (_a = keys[0]) !== null && _a !== void 0 ? _a : \"\";\n            var arrOfDates = obj[className];\n            if (typeof className === \"string\" && Array.isArray(arrOfDates)) {\n                for (var k = 0, len_1 = arrOfDates.length; k < len_1; k++) {\n                    var dateK = arrOfDates[k];\n                    if (dateK) {\n                        var key = formatDate(dateK, \"MM.dd.yyyy\");\n                        var classNamesArr = dateClasses.get(key) || [];\n                        if (!classNamesArr.includes(className)) {\n                            classNamesArr.push(className);\n                            dateClasses.set(key, classNamesArr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return dateClasses;\n}\n/**\n * Compare the two arrays\n * @param array1 The first array to compare.\n * @param array2 The second array to compare.\n * @returns true, if the passed arrays are equal, false otherwise.\n */\nfunction arraysAreEqual(array1, array2) {\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    return array1.every(function (value, index) { return value === array2[index]; });\n}\n/**\n * Assign the custom class to each date\n * @param holidayDates array of object containing date and name of the holiday\n * @param defaultClassName className to be added.\n * @returns Map containing date as key and array of className and holiday name as value\n */\nfunction getHolidaysMap(holidayDates, defaultClassName) {\n    if (holidayDates === void 0) { holidayDates = []; }\n    if (defaultClassName === void 0) { defaultClassName = \"react-datepicker__day--holidays\"; }\n    var dateClasses = new Map();\n    holidayDates.forEach(function (holiday) {\n        var dateObj = holiday.date, holidayName = holiday.holidayName;\n        if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateObj)) {\n            return;\n        }\n        var key = formatDate(dateObj, \"MM.dd.yyyy\");\n        var classNamesObj = dateClasses.get(key) || {\n            className: \"\",\n            holidayNames: [],\n        };\n        if (\"className\" in classNamesObj &&\n            classNamesObj[\"className\"] === defaultClassName &&\n            arraysAreEqual(classNamesObj[\"holidayNames\"], [holidayName])) {\n            return;\n        }\n        classNamesObj[\"className\"] = defaultClassName;\n        var holidayNameArr = classNamesObj[\"holidayNames\"];\n        classNamesObj[\"holidayNames\"] = holidayNameArr\n            ? __spreadArray(__spreadArray([], holidayNameArr, true), [holidayName], false) : [holidayName];\n        dateClasses.set(key, classNamesObj);\n    });\n    return dateClasses;\n}\n/**\n * Determines the times to inject after a given start of day, current time, and multiplier.\n * @param startOfDay The start of the day.\n * @param currentTime The current time.\n * @param currentMultiplier The current multiplier.\n * @param intervals The intervals.\n * @param injectedTimes The times to potentially inject.\n * @returns An array of times to inject.\n */\nfunction timesToInjectAfter(startOfDay, currentTime, currentMultiplier, intervals, injectedTimes) {\n    var l = injectedTimes.length;\n    var times = [];\n    for (var i = 0; i < l; i++) {\n        var injectedTime = startOfDay;\n        var injectedTimeValue = injectedTimes[i];\n        if (injectedTimeValue) {\n            injectedTime = (0,date_fns_addHours__WEBPACK_IMPORTED_MODULE_51__.addHours)(injectedTime, (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(injectedTimeValue));\n            injectedTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(injectedTime, (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(injectedTimeValue));\n            injectedTime = (0,date_fns_addSeconds__WEBPACK_IMPORTED_MODULE_53__.addSeconds)(injectedTime, (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(injectedTimeValue));\n        }\n        var nextTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(startOfDay, (currentMultiplier + 1) * intervals);\n        if ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(injectedTime, currentTime) &&\n            (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(injectedTime, nextTime) &&\n            injectedTimeValue != undefined) {\n            times.push(injectedTimeValue);\n        }\n    }\n    return times;\n}\n/**\n * Adds a leading zero to a number if it's less than 10.\n * @param i The number to add a leading zero to.\n * @returns The number as a string, with a leading zero if it was less than 10.\n */\nfunction addZero(i) {\n    return i < 10 ? \"0\".concat(i) : \"\".concat(i);\n}\n/**\n * Gets the start and end years for a period.\n * @param date The date to get the period for.\n * @param yearItemNumber The number of years in the period. Defaults to DEFAULT_YEAR_ITEM_NUMBER.\n * @returns An object with the start and end years for the period.\n */\nfunction getYearsPeriod(date, yearItemNumber) {\n    if (yearItemNumber === void 0) { yearItemNumber = DEFAULT_YEAR_ITEM_NUMBER; }\n    var endPeriod = Math.ceil((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date) / yearItemNumber) * yearItemNumber;\n    var startPeriod = endPeriod - (yearItemNumber - 1);\n    return { startPeriod: startPeriod, endPeriod: endPeriod };\n}\n/**\n * Gets the number of hours in a day.\n * @param d The date to get the number of hours for.\n * @returns The number of hours in the day.\n */\nfunction getHoursInDay(d) {\n    var startOfDay = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n    var startOfTheNextDay = new Date(d.getFullYear(), d.getMonth(), d.getDate(), 24);\n    return Math.round((+startOfTheNextDay - +startOfDay) / 3600000);\n}\n/**\n * Returns the start of the minute for the given date\n *\n * NOTE: this function is a DST and timezone-safe analog of `date-fns/startOfMinute`\n * do not make changes unless you know what you're doing\n *\n * See comments on https://github.com/Hacker0x01/react-datepicker/pull/4244\n * for more details\n *\n * @param d date\n * @returns start of the minute\n */\nfunction startOfMinute(d) {\n    var seconds = d.getSeconds();\n    var milliseconds = d.getMilliseconds();\n    return (0,date_fns_toDate__WEBPACK_IMPORTED_MODULE_5__.toDate)(d.getTime() - seconds * 1000 - milliseconds);\n}\n/**\n * Returns whether the given dates are in the same minute\n *\n * This function is a DST and timezone-safe analog of `date-fns/isSameMinute`\n *\n * @param d1\n * @param d2\n * @returns\n */\nfunction isSameMinute(d1, d2) {\n    return startOfMinute(d1).getTime() === startOfMinute(d2).getTime();\n}\n/**\n * Returns a new datetime object representing the input date with midnight time\n * @param date The date to get the midnight time for\n * @returns A new datetime object representing the input date with midnight time\n */\nfunction getMidnightDate(date) {\n    if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date)) {\n        throw new Error(\"Invalid date\");\n    }\n    var dateWithoutTime = new Date(date);\n    dateWithoutTime.setHours(0, 0, 0, 0);\n    return dateWithoutTime;\n}\n/**\n * Is the first date before the second one?\n * @param date The date that should be before the other one to return true\n * @param dateToCompare The date to compare with\n * @returns The first date is before the second date\n *\n * Note:\n *  This function considers the mid-night of the given dates for comparison.\n *  It evaluates whether date is before dateToCompare based on their mid-night timestamps.\n */\nfunction isDateBefore(date, dateToCompare) {\n    if (!(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(date) || !(0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(dateToCompare)) {\n        throw new Error(\"Invalid date received\");\n    }\n    var midnightDate = getMidnightDate(date);\n    var midnightDateToCompare = getMidnightDate(dateToCompare);\n    return (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(midnightDate, midnightDateToCompare);\n}\n/**\n * Checks if the space key was pressed down.\n *\n * @param event - The keyboard event.\n * @returns - Returns true if the space key was pressed down, false otherwise.\n */\nfunction isSpaceKeyDown(event) {\n    return event.key === KeyType.Space;\n}\n\n/**\n * `InputTime` is a React component that manages time input.\n *\n * @component\n * @example\n * <InputTime timeString=\"12:00\" />\n *\n * @param props - The properties that define the `InputTime` component.\n * @param props.onChange - Function that is called when the date changes.\n * @param props.date - The initial date value.\n * @param props.timeString - The initial time string value.\n * @param props.timeInputLabel - The label for the time input.\n * @param props.customTimeInput - An optional custom time input element.\n *\n * @returns The `InputTime` component.\n */\nvar InputTime = /** @class */ (function (_super) {\n    __extends(InputTime, _super);\n    function InputTime(props) {\n        var _this = _super.call(this, props) || this;\n        _this.onTimeChange = function (time) {\n            var _a, _b;\n            _this.setState({ time: time });\n            var propDate = _this.props.date;\n            var isPropDateValid = propDate instanceof Date && !isNaN(+propDate);\n            var date = isPropDateValid ? propDate : new Date();\n            if (time === null || time === void 0 ? void 0 : time.includes(\":\")) {\n                var _c = time.split(\":\"), hours = _c[0], minutes = _c[1];\n                date.setHours(Number(hours));\n                date.setMinutes(Number(minutes));\n            }\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, date);\n        };\n        _this.renderTimeInput = function () {\n            var time = _this.state.time;\n            var _a = _this.props, date = _a.date, timeString = _a.timeString, customTimeInput = _a.customTimeInput;\n            if (customTimeInput) {\n                return (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(customTimeInput, {\n                    date: date,\n                    value: time,\n                    onChange: _this.onTimeChange,\n                });\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", { type: \"time\", className: \"react-datepicker-time__input\", placeholder: \"Time\", name: \"time-input\", required: true, value: time, onChange: function (event) {\n                    _this.onTimeChange(event.target.value || timeString);\n                } }));\n        };\n        _this.state = {\n            time: _this.props.timeString,\n        };\n        return _this;\n    }\n    InputTime.getDerivedStateFromProps = function (props, state) {\n        if (props.timeString !== state.time) {\n            return {\n                time: props.timeString,\n            };\n        }\n        // Return null to indicate no change to state.\n        return null;\n    };\n    InputTime.prototype.render = function () {\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__input-time-container\" },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker-time__caption\" }, this.props.timeInputLabel),\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker-time__input-container\" },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker-time__input\" }, this.renderTimeInput()))));\n    };\n    return InputTime;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\n/**\n * `Day` is a React component that represents a single day in a date picker.\n * It handles the rendering and interaction of a day.\n *\n * @prop ariaLabelPrefixWhenEnabled - Aria label prefix when the day is enabled.\n * @prop ariaLabelPrefixWhenDisabled - Aria label prefix when the day is disabled.\n * @prop disabledKeyboardNavigation - Whether keyboard navigation is disabled.\n * @prop day - The day to be displayed.\n * @prop dayClassName - Function to customize the CSS class of the day.\n * @prop endDate - The end date in a range.\n * @prop highlightDates - Map of dates to be highlighted.\n * @prop holidays - Map of holiday dates.\n * @prop inline - Whether the date picker is inline.\n * @prop shouldFocusDayInline - Whether the day should be focused when date picker is inline.\n * @prop month - The month the day belongs to.\n * @prop onClick - Click event handler.\n * @prop onMouseEnter - Mouse enter event handler.\n * @prop handleOnKeyDown - Key down event handler.\n * @prop usePointerEvent - Whether to use pointer events.\n * @prop preSelection - The date that is currently selected.\n * @prop selected - The selected date.\n * @prop selectingDate - The date currently being selected.\n * @prop selectsEnd - Whether the day can be the end date in a range.\n * @prop selectsStart - Whether the day can be the start date in a range.\n * @prop selectsRange - Whether the day can be in a range.\n * @prop showWeekPicker - Whether to show week picker.\n * @prop showWeekNumber - Whether to show week numbers.\n * @prop selectsDisabledDaysInRange - Whether to select disabled days in a range.\n * @prop selectsMultiple - Whether to allow multiple date selection.\n * @prop selectedDates - Array of selected dates.\n * @prop startDate - The start date in a range.\n * @prop renderDayContents - Function to customize the rendering of the day's contents.\n * @prop containerRef - Ref for the container.\n * @prop excludeDates - Array of dates to be excluded.\n * @prop calendarStartDay - The start day of the week.\n * @prop locale - The locale object.\n * @prop monthShowsDuplicateDaysEnd - Whether to show duplicate days at the end of the month.\n * @prop monthShowsDuplicateDaysStart - Whether to show duplicate days at the start of the month.\n * @prop includeDates - Array of dates to be included.\n * @prop includeDateIntervals - Array of date intervals to be included.\n * @prop minDate - The minimum date that can be selected.\n * @prop maxDate - The maximum date that can be selected.\n *\n * @example\n * ```tsx\n * import React from 'react';\n * import Day from './day';\n *\n * function MyComponent() {\n *   const handleDayClick = (event) => {\n *     console.log('Day clicked', event);\n *   };\n *\n *   const handleDayMouseEnter = (event) => {\n *     console.log('Mouse entered day', event);\n *   };\n *\n *   const renderDayContents = (date) => {\n *     return <div>{date.getDate()}</div>;\n *   };\n *\n *   return (\n *     <Day\n *       day={new Date()}\n *       onClick={handleDayClick}\n *       onMouseEnter={handleDayMouseEnter}\n *       renderDayContents={renderDayContents}\n *     />\n *   );\n * }\n *\n * export default MyComponent;\n * ```\n */\nvar Day = /** @class */ (function (_super) {\n    __extends(Day, _super);\n    function Day() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.dayEl = (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.handleClick = function (event) {\n            if (!_this.isDisabled() && _this.props.onClick) {\n                _this.props.onClick(event);\n            }\n        };\n        _this.handleMouseEnter = function (event) {\n            if (!_this.isDisabled() && _this.props.onMouseEnter) {\n                _this.props.onMouseEnter(event);\n            }\n        };\n        _this.handleOnKeyDown = function (event) {\n            var _a, _b;\n            var eventKey = event.key;\n            if (eventKey === KeyType.Space) {\n                event.preventDefault();\n                event.key = KeyType.Enter;\n            }\n            (_b = (_a = _this.props).handleOnKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        };\n        _this.isSameDay = function (other) {\n            return isSameDay(_this.props.day, other);\n        };\n        _this.isKeyboardSelected = function () {\n            var _a;\n            if (_this.props.disabledKeyboardNavigation) {\n                return false;\n            }\n            var isSelectedDate = _this.props.selectsMultiple\n                ? (_a = _this.props.selectedDates) === null || _a === void 0 ? void 0 : _a.some(function (date) { return _this.isSameDayOrWeek(date); })\n                : _this.isSameDayOrWeek(_this.props.selected);\n            return !isSelectedDate && _this.isSameDayOrWeek(_this.props.preSelection);\n        };\n        _this.isDisabled = function () {\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayDisabled(_this.props.day, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n                includeDateIntervals: _this.props.includeDateIntervals,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate,\n            });\n        };\n        _this.isExcluded = function () {\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayExcluded(_this.props.day, {\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n            });\n        };\n        _this.isStartOfWeek = function () {\n            return isSameDay(_this.props.day, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n        };\n        _this.isSameWeek = function (other) {\n            return _this.props.showWeekPicker &&\n                isSameDay(other, getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay));\n        };\n        _this.isSameDayOrWeek = function (other) {\n            return _this.isSameDay(other) || _this.isSameWeek(other);\n        };\n        _this.getHighLightedClass = function () {\n            var _a = _this.props, day = _a.day, highlightDates = _a.highlightDates;\n            if (!highlightDates) {\n                return false;\n            }\n            // Looking for className in the Map of {'day string, 'className'}\n            var dayStr = formatDate(day, \"MM.dd.yyyy\");\n            return highlightDates.get(dayStr);\n        };\n        // Function to return the array containing className associated to the date\n        _this.getHolidaysClass = function () {\n            var _a;\n            var _b = _this.props, day = _b.day, holidays = _b.holidays;\n            if (!holidays) {\n                // For type consistency no other reasons\n                return [undefined];\n            }\n            var dayStr = formatDate(day, \"MM.dd.yyyy\");\n            // Looking for className in the Map of {day string: {className, holidayName}}\n            if (holidays.has(dayStr)) {\n                return [(_a = holidays.get(dayStr)) === null || _a === void 0 ? void 0 : _a.className];\n            }\n            // For type consistency no other reasons\n            return [undefined];\n        };\n        _this.isInRange = function () {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isDayInRange(day, startDate, endDate);\n        };\n        _this.isInSelectingRange = function () {\n            var _a;\n            var _b = _this.props, day = _b.day, selectsStart = _b.selectsStart, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange, selectsDisabledDaysInRange = _b.selectsDisabledDaysInRange, startDate = _b.startDate, endDate = _b.endDate;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) ||\n                !selectingDate ||\n                (!selectsDisabledDaysInRange && _this.isDisabled())) {\n                return false;\n            }\n            if (selectsStart &&\n                endDate &&\n                ((0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(selectingDate, endDate) || isEqual(selectingDate, endDate))) {\n                return isDayInRange(day, selectingDate, endDate);\n            }\n            if (selectsEnd &&\n                startDate &&\n                ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n                return isDayInRange(day, startDate, selectingDate);\n            }\n            if (selectsRange &&\n                startDate &&\n                !endDate &&\n                ((0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(selectingDate, startDate) || isEqual(selectingDate, startDate))) {\n                return isDayInRange(day, startDate, selectingDate);\n            }\n            return false;\n        };\n        _this.isSelectingRangeStart = function () {\n            var _a;\n            if (!_this.isInSelectingRange()) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, startDate = _b.startDate, selectsStart = _b.selectsStart;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsStart) {\n                return isSameDay(day, selectingDate);\n            }\n            else {\n                return isSameDay(day, startDate);\n            }\n        };\n        _this.isSelectingRangeEnd = function () {\n            var _a;\n            if (!_this.isInSelectingRange()) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, endDate = _b.endDate, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsEnd || selectsRange) {\n                return isSameDay(day, selectingDate);\n            }\n            else {\n                return isSameDay(day, endDate);\n            }\n        };\n        _this.isRangeStart = function () {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameDay(startDate, day);\n        };\n        _this.isRangeEnd = function () {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameDay(endDate, day);\n        };\n        _this.isWeekend = function () {\n            var weekday = (0,date_fns_getDay__WEBPACK_IMPORTED_MODULE_55__.getDay)(_this.props.day);\n            return weekday === 0 || weekday === 6;\n        };\n        _this.isAfterMonth = function () {\n            return (_this.props.month !== undefined &&\n                (_this.props.month + 1) % 12 === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day));\n        };\n        _this.isBeforeMonth = function () {\n            return (_this.props.month !== undefined &&\n                ((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day) + 1) % 12 === _this.props.month);\n        };\n        _this.isCurrentDay = function () { return _this.isSameDay(newDate()); };\n        _this.isSelected = function () {\n            var _a;\n            if (_this.props.selectsMultiple) {\n                return (_a = _this.props.selectedDates) === null || _a === void 0 ? void 0 : _a.some(function (date) {\n                    return _this.isSameDayOrWeek(date);\n                });\n            }\n            return _this.isSameDayOrWeek(_this.props.selected);\n        };\n        _this.getClassNames = function (date) {\n            var dayClassName = _this.props.dayClassName\n                ? _this.props.dayClassName(date)\n                : undefined;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__day\", dayClassName, \"react-datepicker__day--\" + getDayOfWeekCode(_this.props.day), {\n                \"react-datepicker__day--disabled\": _this.isDisabled(),\n                \"react-datepicker__day--excluded\": _this.isExcluded(),\n                \"react-datepicker__day--selected\": _this.isSelected(),\n                \"react-datepicker__day--keyboard-selected\": _this.isKeyboardSelected(),\n                \"react-datepicker__day--range-start\": _this.isRangeStart(),\n                \"react-datepicker__day--range-end\": _this.isRangeEnd(),\n                \"react-datepicker__day--in-range\": _this.isInRange(),\n                \"react-datepicker__day--in-selecting-range\": _this.isInSelectingRange(),\n                \"react-datepicker__day--selecting-range-start\": _this.isSelectingRangeStart(),\n                \"react-datepicker__day--selecting-range-end\": _this.isSelectingRangeEnd(),\n                \"react-datepicker__day--today\": _this.isCurrentDay(),\n                \"react-datepicker__day--weekend\": _this.isWeekend(),\n                \"react-datepicker__day--outside-month\": _this.isAfterMonth() || _this.isBeforeMonth(),\n            }, _this.getHighLightedClass(), _this.getHolidaysClass());\n        };\n        _this.getAriaLabel = function () {\n            var _a = _this.props, day = _a.day, _b = _a.ariaLabelPrefixWhenEnabled, ariaLabelPrefixWhenEnabled = _b === void 0 ? \"Choose\" : _b, _c = _a.ariaLabelPrefixWhenDisabled, ariaLabelPrefixWhenDisabled = _c === void 0 ? \"Not available\" : _c;\n            var prefix = _this.isDisabled() || _this.isExcluded()\n                ? ariaLabelPrefixWhenDisabled\n                : ariaLabelPrefixWhenEnabled;\n            return \"\".concat(prefix, \" \").concat(formatDate(day, \"PPPP\", _this.props.locale));\n        };\n        // A function to return the holiday's name as title's content\n        _this.getTitle = function () {\n            var _a = _this.props, day = _a.day, _b = _a.holidays, holidays = _b === void 0 ? new Map() : _b, excludeDates = _a.excludeDates;\n            var compareDt = formatDate(day, \"MM.dd.yyyy\");\n            var titles = [];\n            if (holidays.has(compareDt)) {\n                titles.push.apply(titles, holidays.get(compareDt).holidayNames);\n            }\n            if (_this.isExcluded()) {\n                titles.push(excludeDates === null || excludeDates === void 0 ? void 0 : excludeDates.filter(function (excludeDate) {\n                    if (excludeDate instanceof Date) {\n                        return isSameDay(excludeDate, day);\n                    }\n                    return isSameDay(excludeDate === null || excludeDate === void 0 ? void 0 : excludeDate.date, day);\n                }).map(function (excludeDate) {\n                    if (excludeDate instanceof Date) {\n                        return undefined;\n                    }\n                    return excludeDate === null || excludeDate === void 0 ? void 0 : excludeDate.message;\n                }));\n            }\n            // I'm not sure that this is a right output, but all tests are green\n            return titles.join(\", \");\n        };\n        _this.getTabIndex = function () {\n            var selectedDay = _this.props.selected;\n            var preSelectionDay = _this.props.preSelection;\n            var tabIndex = !(_this.props.showWeekPicker &&\n                (_this.props.showWeekNumber || !_this.isStartOfWeek())) &&\n                (_this.isKeyboardSelected() ||\n                    (_this.isSameDay(selectedDay) &&\n                        isSameDay(preSelectionDay, selectedDay)))\n                ? 0\n                : -1;\n            return tabIndex;\n        };\n        // various cases when we need to apply focus to the preselected day\n        // focus the day on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n        // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n        _this.handleFocusDay = function () {\n            var _a;\n            // only do this while the input isn't focused\n            // otherwise, typing/backspacing the date manually may steal focus away from the input\n            _this.shouldFocusDay() && ((_a = _this.dayEl.current) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true }));\n        };\n        _this.renderDayContents = function () {\n            if (_this.props.monthShowsDuplicateDaysEnd && _this.isAfterMonth())\n                return null;\n            if (_this.props.monthShowsDuplicateDaysStart && _this.isBeforeMonth())\n                return null;\n            return _this.props.renderDayContents\n                ? _this.props.renderDayContents((0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_56__.getDate)(_this.props.day), _this.props.day)\n                : (0,date_fns_getDate__WEBPACK_IMPORTED_MODULE_56__.getDate)(_this.props.day);\n        };\n        _this.render = function () { return (\n        // TODO: Use <option> instead of the \"option\" role to ensure accessibility across all devices.\n        react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { ref: _this.dayEl, className: _this.getClassNames(_this.props.day), onKeyDown: _this.handleOnKeyDown, onClick: _this.handleClick, onMouseEnter: !_this.props.usePointerEvent ? _this.handleMouseEnter : undefined, onPointerEnter: _this.props.usePointerEvent ? _this.handleMouseEnter : undefined, tabIndex: _this.getTabIndex(), \"aria-label\": _this.getAriaLabel(), role: \"option\", title: _this.getTitle(), \"aria-disabled\": _this.isDisabled(), \"aria-current\": _this.isCurrentDay() ? \"date\" : undefined, \"aria-selected\": _this.isSelected() || _this.isInRange() },\n            _this.renderDayContents(),\n            _this.getTitle() !== \"\" && (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"overlay\" }, _this.getTitle())))); };\n        return _this;\n    }\n    Day.prototype.componentDidMount = function () {\n        this.handleFocusDay();\n    };\n    Day.prototype.componentDidUpdate = function () {\n        this.handleFocusDay();\n    };\n    Day.prototype.shouldFocusDay = function () {\n        var shouldFocusDay = false;\n        if (this.getTabIndex() === 0 && this.isSameDay(this.props.preSelection)) {\n            // there is currently no activeElement and not inline\n            if (!document.activeElement || document.activeElement === document.body) {\n                shouldFocusDay = true;\n            }\n            // inline version:\n            // do not focus on initial render to prevent autoFocus issue\n            // focus after month has changed via keyboard\n            if (this.props.inline && !this.props.shouldFocusDayInline) {\n                shouldFocusDay = false;\n            }\n            if (this.isDayActiveElement()) {\n                shouldFocusDay = true;\n            }\n            if (this.isDuplicateDay()) {\n                shouldFocusDay = false;\n            }\n        }\n        return shouldFocusDay;\n    };\n    // the activeElement is in the container, and it is another instance of Day\n    Day.prototype.isDayActiveElement = function () {\n        var _a, _b, _c;\n        return (((_b = (_a = this.props.containerRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(document.activeElement)) &&\n            ((_c = document.activeElement) === null || _c === void 0 ? void 0 : _c.classList.contains(\"react-datepicker__day\")));\n    };\n    Day.prototype.isDuplicateDay = function () {\n        return (\n        //day is one of the non rendered duplicate days\n        (this.props.monthShowsDuplicateDaysEnd && this.isAfterMonth()) ||\n            (this.props.monthShowsDuplicateDaysStart && this.isBeforeMonth()));\n    };\n    return Day;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar WeekNumber = /** @class */ (function (_super) {\n    __extends(WeekNumber, _super);\n    function WeekNumber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.weekNumberEl = (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.handleClick = function (event) {\n            if (_this.props.onClick) {\n                _this.props.onClick(event);\n            }\n        };\n        _this.handleOnKeyDown = function (event) {\n            var _a, _b;\n            var eventKey = event.key;\n            if (eventKey === KeyType.Space) {\n                event.preventDefault();\n                event.key = KeyType.Enter;\n            }\n            (_b = (_a = _this.props).handleOnKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        };\n        _this.isKeyboardSelected = function () {\n            return !_this.props.disabledKeyboardNavigation &&\n                !isSameDay(_this.props.date, _this.props.selected) &&\n                isSameDay(_this.props.date, _this.props.preSelection);\n        };\n        _this.getTabIndex = function () {\n            return _this.props.showWeekPicker &&\n                _this.props.showWeekNumber &&\n                (_this.isKeyboardSelected() ||\n                    (isSameDay(_this.props.date, _this.props.selected) &&\n                        isSameDay(_this.props.preSelection, _this.props.selected)))\n                ? 0\n                : -1;\n        };\n        // various cases when we need to apply focus to the preselected week-number\n        // focus the week-number on mount/update so that keyboard navigation works while cycling through months with up or down keys (not for prev and next month buttons)\n        // prevent focus for these activeElement cases so we don't pull focus from the input as the calendar opens\n        _this.handleFocusWeekNumber = function (prevProps) {\n            var shouldFocusWeekNumber = false;\n            // only do this while the input isn't focused\n            // otherwise, typing/backspacing the date manually may steal focus away from the input\n            if (_this.getTabIndex() === 0 &&\n                !(prevProps === null || prevProps === void 0 ? void 0 : prevProps.isInputFocused) &&\n                isSameDay(_this.props.date, _this.props.preSelection)) {\n                // there is currently no activeElement and not inline\n                if (!document.activeElement || document.activeElement === document.body) {\n                    shouldFocusWeekNumber = true;\n                }\n                // inline version:\n                // do not focus on initial render to prevent autoFocus issue\n                // focus after month has changed via keyboard\n                if (_this.props.inline && !_this.props.shouldFocusDayInline) {\n                    shouldFocusWeekNumber = false;\n                }\n                // the activeElement is in the container, and it is another instance of WeekNumber\n                if (_this.props.containerRef &&\n                    _this.props.containerRef.current &&\n                    _this.props.containerRef.current.contains(document.activeElement) &&\n                    document.activeElement &&\n                    document.activeElement.classList.contains(\"react-datepicker__week-number\")) {\n                    shouldFocusWeekNumber = true;\n                }\n            }\n            shouldFocusWeekNumber &&\n                _this.weekNumberEl.current &&\n                _this.weekNumberEl.current.focus({ preventScroll: true });\n        };\n        return _this;\n    }\n    Object.defineProperty(WeekNumber, \"defaultProps\", {\n        get: function () {\n            return {\n                ariaLabelPrefix: \"week \",\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WeekNumber.prototype.componentDidMount = function () {\n        this.handleFocusWeekNumber();\n    };\n    WeekNumber.prototype.componentDidUpdate = function (prevProps) {\n        this.handleFocusWeekNumber(prevProps);\n    };\n    WeekNumber.prototype.render = function () {\n        var _a = this.props, weekNumber = _a.weekNumber, _b = _a.ariaLabelPrefix, ariaLabelPrefix = _b === void 0 ? WeekNumber.defaultProps.ariaLabelPrefix : _b, onClick = _a.onClick;\n        var weekNumberClasses = {\n            \"react-datepicker__week-number\": true,\n            \"react-datepicker__week-number--clickable\": !!onClick,\n            \"react-datepicker__week-number--selected\": !!onClick && isSameDay(this.props.date, this.props.selected),\n            \"react-datepicker__week-number--keyboard-selected\": this.isKeyboardSelected(),\n        };\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { ref: this.weekNumberEl, className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(weekNumberClasses), \"aria-label\": \"\".concat(ariaLabelPrefix, \" \").concat(this.props.weekNumber), onClick: this.handleClick, onKeyDown: this.handleOnKeyDown, tabIndex: this.getTabIndex() }, weekNumber));\n    };\n    return WeekNumber;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar Week = /** @class */ (function (_super) {\n    __extends(Week, _super);\n    function Week() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isDisabled = function (day) {\n            return isDayDisabled(day, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n                includeDateIntervals: _this.props.includeDateIntervals,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate,\n            });\n        };\n        _this.handleDayClick = function (day, event) {\n            if (_this.props.onDayClick) {\n                _this.props.onDayClick(day, event);\n            }\n        };\n        _this.handleDayMouseEnter = function (day) {\n            if (_this.props.onDayMouseEnter) {\n                _this.props.onDayMouseEnter(day);\n            }\n        };\n        _this.handleWeekClick = function (day, weekNumber, event) {\n            var _a, _b, _c;\n            var enabledWeekDay = new Date(day);\n            for (var i = 0; i < 7; i++) {\n                var processingDay = new Date(day);\n                processingDay.setDate(processingDay.getDate() + i);\n                var isEnabled = !_this.isDisabled(processingDay);\n                if (isEnabled) {\n                    enabledWeekDay = processingDay;\n                    break;\n                }\n            }\n            if (typeof _this.props.onWeekSelect === \"function\") {\n                _this.props.onWeekSelect(enabledWeekDay, weekNumber, event);\n            }\n            if (_this.props.showWeekPicker) {\n                _this.handleDayClick(enabledWeekDay, event);\n            }\n            if ((_a = _this.props.shouldCloseOnSelect) !== null && _a !== void 0 ? _a : Week.defaultProps.shouldCloseOnSelect) {\n                (_c = (_b = _this.props).setOpen) === null || _c === void 0 ? void 0 : _c.call(_b, false);\n            }\n        };\n        _this.formatWeekNumber = function (date) {\n            if (_this.props.formatWeekNumber) {\n                return _this.props.formatWeekNumber(date);\n            }\n            return getWeek(date);\n        };\n        _this.renderDays = function () {\n            var startOfWeek = _this.startOfWeek();\n            var days = [];\n            var weekNumber = _this.formatWeekNumber(startOfWeek);\n            if (_this.props.showWeekNumber) {\n                var onClickAction = _this.props.onWeekSelect || _this.props.showWeekPicker\n                    ? _this.handleWeekClick.bind(_this, startOfWeek, weekNumber)\n                    : undefined;\n                days.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(WeekNumber, _assign({ key: \"W\" }, Week.defaultProps, _this.props, { weekNumber: weekNumber, date: startOfWeek, onClick: onClickAction })));\n            }\n            return days.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\n                var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_57__.addDays)(startOfWeek, offset);\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Day, _assign({}, Week.defaultProps, _this.props, { ariaLabelPrefixWhenEnabled: _this.props.chooseDayAriaLabelPrefix, ariaLabelPrefixWhenDisabled: _this.props.disabledDayAriaLabelPrefix, key: day.valueOf(), day: day, onClick: _this.handleDayClick.bind(_this, day), onMouseEnter: _this.handleDayMouseEnter.bind(_this, day) })));\n            }));\n        };\n        _this.startOfWeek = function () {\n            return getStartOfWeek(_this.props.day, _this.props.locale, _this.props.calendarStartDay);\n        };\n        _this.isKeyboardSelected = function () {\n            return !_this.props.disabledKeyboardNavigation &&\n                !isSameDay(_this.startOfWeek(), _this.props.selected) &&\n                isSameDay(_this.startOfWeek(), _this.props.preSelection);\n        };\n        return _this;\n    }\n    Object.defineProperty(Week, \"defaultProps\", {\n        get: function () {\n            return {\n                shouldCloseOnSelect: true,\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Week.prototype.render = function () {\n        var weekNumberClasses = {\n            \"react-datepicker__week\": true,\n            \"react-datepicker__week--selected\": isSameDay(this.startOfWeek(), this.props.selected),\n            \"react-datepicker__week--keyboard-selected\": this.isKeyboardSelected(),\n        };\n        return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(weekNumberClasses) }, this.renderDays());\n    };\n    return Week;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar _a;\nvar FIXED_HEIGHT_STANDARD_WEEK_COUNT = 6;\nvar MONTH_COLUMNS_LAYOUT = {\n    TWO_COLUMNS: \"two_columns\",\n    THREE_COLUMNS: \"three_columns\",\n    FOUR_COLUMNS: \"four_columns\",\n};\nvar MONTH_COLUMNS = (_a = {},\n    _a[MONTH_COLUMNS_LAYOUT.TWO_COLUMNS] = {\n        grid: [\n            [0, 1],\n            [2, 3],\n            [4, 5],\n            [6, 7],\n            [8, 9],\n            [10, 11],\n        ],\n        verticalNavigationOffset: 2,\n    },\n    _a[MONTH_COLUMNS_LAYOUT.THREE_COLUMNS] = {\n        grid: [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [9, 10, 11],\n        ],\n        verticalNavigationOffset: 3,\n    },\n    _a[MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS] = {\n        grid: [\n            [0, 1, 2, 3],\n            [4, 5, 6, 7],\n            [8, 9, 10, 11],\n        ],\n        verticalNavigationOffset: 4,\n    },\n    _a);\nvar MONTH_NAVIGATION_HORIZONTAL_OFFSET = 1;\nfunction getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker) {\n    if (showFourColumnMonthYearPicker) {\n        return MONTH_COLUMNS_LAYOUT.FOUR_COLUMNS;\n    }\n    if (showTwoColumnMonthYearPicker) {\n        return MONTH_COLUMNS_LAYOUT.TWO_COLUMNS;\n    }\n    return MONTH_COLUMNS_LAYOUT.THREE_COLUMNS;\n}\n/**\n * `Month` is a React component that represents a month in a calendar.\n * It accepts a `MonthProps` object as props which provides various configurations and event handlers.\n *\n * @prop dayClassName - Function to determine the class name for a day.\n * @prop monthClassName - Function to determine the class name for a month.\n * @prop filterDate - Function to filter dates.\n * @prop formatWeekNumber - Function to format the week number.\n * @prop onDayClick - Function to handle day click events.\n * @prop onDayMouseEnter - Function to handle mouse enter events on a day.\n * @prop onMouseLeave - Function to handle mouse leave events.\n * @prop onWeekSelect - Function to handle week selection.\n * @prop setPreSelection - Function to set pre-selection.\n * @prop setOpen - Function to set open state.\n * @prop renderDayContents - Function to render day contents.\n * @prop renderMonthContent - Function to render month content.\n * @prop renderQuarterContent - Function to render quarter content.\n * @prop handleOnKeyDown - Function to handle key down events.\n * @prop handleOnMonthKeyDown - Function to handle key down events on a month.\n * @prop ariaLabelPrefix - Aria label prefix.\n * @prop chooseDayAriaLabelPrefix - Aria label prefix for choosing a day.\n * @prop disabledDayAriaLabelPrefix - Aria label prefix for disabled day.\n * @prop disabledKeyboardNavigation - Flag to disable keyboard navigation.\n * @prop day - The day.\n * @prop endDate - The end date.\n * @prop orderInDisplay - The order in display.\n * @prop excludeDates - Dates to exclude.\n * @prop excludeDateIntervals - Date intervals to exclude.\n * @prop fixedHeight - Flag to set fixed height.\n * @prop highlightDates - Dates to highlight.\n * @prop holidays - Holidays.\n * @prop includeDates - Dates to include.\n * @prop includeDateIntervals - Date intervals to include.\n * @prop inline - Flag to set inline.\n * @prop shouldFocusDayInline - Flag to set focus on day inline.\n * @prop locale - The locale.\n * @prop maxDate - The maximum date.\n * @prop minDate - The minimum date.\n * @prop usePointerEvent - Flag to use pointer event.\n * @prop peekNextMonth - Flag to peek next month.\n * @prop preSelection - The pre-selection.\n * @prop selected - The selected date.\n * @prop selectingDate - The selecting date.\n * @prop calendarStartDay - The calendar start day.\n * @prop selectsEnd - Flag to select end.\n * @prop selectsStart - Flag to select start.\n * @prop selectsRange - Flag to select range.\n * @prop selectsDisabledDaysInRange - Flag to select disabled days in range.\n * @prop selectsMultiple - Flag to select multiple.\n * @prop selectedDates - The selected dates.\n * @prop showWeekNumbers - Flag to show week numbers.\n * @prop startDate - The start date.\n * @prop shouldCloseOnSelect - Flag to close on select.\n * @prop showMonthYearPicker - Flag to show month year picker.\n * @prop showFullMonthYearPicker - Flag to show full month year picker.\n * @prop showTwoColumnMonthYearPicker - Flag to show two column month year picker.\n * @prop showFourColumnMonthYearPicker - Flag to show four column month year picker.\n * @prop showQuarterYearPicker - Flag to show quarter year picker.\n * @prop showWeekPicker - Flag to show week picker.\n * @prop isInputFocused - Flag to set input focus.\n * @prop weekAriaLabelPrefix - Aria label prefix for week.\n * @prop containerRef - The container reference.\n * @prop monthShowsDuplicateDaysEnd - Flag to show duplicate days at the end of the month.\n * @prop monthShowsDuplicateDaysStart - Flag to show duplicate days at the start of the month.\n *\n * @example\n * ```tsx\n * function App() {\n *  const handleDayClick = (date) => {\n *     console.log('Day clicked: ', date);\n *   };\n *\n *   const handleDayMouseEnter = (date) => {\n *     console.log('Mouse entered on day: ', date);\n *   };\n *\n *   return (\n *     <div>\n *       <Month\n *         day={new Date()}\n *         endDate={new Date()}\n *         onDayClick={handleDayClick}\n *         onDayMouseEnter={handleDayMouseEnter}\n *         disabledKeyboardNavigation={false}\n *         showWeekNumbers={true}\n *         showMonthYearPicker={false}\n *       />\n *     </div>\n *   );\n * }\n * ```\n */\nvar Month = /** @class */ (function (_super) {\n    __extends(Month, _super);\n    function Month() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.MONTH_REFS = __spreadArray([], Array(12), true).map(function () { return (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)(); });\n        _this.QUARTER_REFS = __spreadArray([], Array(4), true).map(function () { return (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)(); });\n        _this.isDisabled = function (day) {\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayDisabled(day, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n                includeDateIntervals: _this.props.includeDateIntervals,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate,\n            });\n        };\n        _this.isExcluded = function (day) {\n            // Almost all props previously were passed as this.props w/o proper typing with prop-types\n            // after the migration to TS i made it explicit\n            return isDayExcluded(day, {\n                excludeDates: _this.props.excludeDates,\n                excludeDateIntervals: _this.props.excludeDateIntervals,\n            });\n        };\n        _this.handleDayClick = function (day, event) {\n            var _a, _b;\n            (_b = (_a = _this.props).onDayClick) === null || _b === void 0 ? void 0 : _b.call(_a, day, event, _this.props.orderInDisplay);\n        };\n        _this.handleDayMouseEnter = function (day) {\n            var _a, _b;\n            (_b = (_a = _this.props).onDayMouseEnter) === null || _b === void 0 ? void 0 : _b.call(_a, day);\n        };\n        _this.handleMouseLeave = function () {\n            var _a, _b;\n            (_b = (_a = _this.props).onMouseLeave) === null || _b === void 0 ? void 0 : _b.call(_a);\n        };\n        _this.isRangeStartMonth = function (m) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), startDate);\n        };\n        _this.isRangeStartQuarter = function (q) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), startDate);\n        };\n        _this.isRangeEndMonth = function (m) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameMonth((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m), endDate);\n        };\n        _this.isRangeEndQuarter = function (q) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate;\n            if (!startDate || !endDate) {\n                return false;\n            }\n            return isSameQuarter((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), endDate);\n        };\n        _this.isInSelectingRangeMonth = function (m) {\n            var _a;\n            var _b = _this.props, day = _b.day, selectsStart = _b.selectsStart, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange, startDate = _b.startDate, endDate = _b.endDate;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isMonthInRange(selectingDate, endDate, m, day);\n            }\n            if (selectsEnd && startDate) {\n                return isMonthInRange(startDate, selectingDate, m, day);\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isMonthInRange(startDate, selectingDate, m, day);\n            }\n            return false;\n        };\n        _this.isSelectingMonthRangeStart = function (m) {\n            var _a;\n            if (!_this.isInSelectingRangeMonth(m)) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, startDate = _b.startDate, selectsStart = _b.selectsStart;\n            var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsStart) {\n                return isSameMonth(_month, selectingDate);\n            }\n            else {\n                return isSameMonth(_month, startDate);\n            }\n        };\n        _this.isSelectingMonthRangeEnd = function (m) {\n            var _a;\n            if (!_this.isInSelectingRangeMonth(m)) {\n                return false;\n            }\n            var _b = _this.props, day = _b.day, endDate = _b.endDate, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange;\n            var _month = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m);\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (selectsEnd || selectsRange) {\n                return isSameMonth(_month, selectingDate);\n            }\n            else {\n                return isSameMonth(_month, endDate);\n            }\n        };\n        _this.isInSelectingRangeQuarter = function (q) {\n            var _a;\n            var _b = _this.props, day = _b.day, selectsStart = _b.selectsStart, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange, startDate = _b.startDate, endDate = _b.endDate;\n            var selectingDate = (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection;\n            if (!(selectsStart || selectsEnd || selectsRange) || !selectingDate) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isQuarterInRange(selectingDate, endDate, q, day);\n            }\n            if (selectsEnd && startDate) {\n                return isQuarterInRange(startDate, selectingDate, q, day);\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isQuarterInRange(startDate, selectingDate, q, day);\n            }\n            return false;\n        };\n        _this.isWeekInMonth = function (startOfWeek) {\n            var day = _this.props.day;\n            var endOfWeek = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_57__.addDays)(startOfWeek, 6);\n            return isSameMonth(startOfWeek, day) || isSameMonth(endOfWeek, day);\n        };\n        _this.isCurrentMonth = function (day, m) {\n            return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && m === (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newDate());\n        };\n        _this.isCurrentQuarter = function (day, q) {\n            return (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()) && q === (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(newDate());\n        };\n        _this.isSelectedMonth = function (day, m, selected) {\n            return (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(selected) === m && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n        };\n        _this.isSelectedQuarter = function (day, q, selected) {\n            return (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(day) === q && (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(day) === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected);\n        };\n        _this.renderWeeks = function () {\n            var weeks = [];\n            var isFixedHeight = _this.props.fixedHeight;\n            var i = 0;\n            var breakAfterNextPush = false;\n            var currentWeekStart = getStartOfWeek(getStartOfMonth(_this.props.day), _this.props.locale, _this.props.calendarStartDay);\n            var isPreSelected = function (preSelection) {\n                return _this.props.showWeekPicker\n                    ? getStartOfWeek(preSelection, _this.props.locale, _this.props.calendarStartDay)\n                    : _this.props.preSelection;\n            };\n            var isSelected = function (selected) {\n                return _this.props.showWeekPicker\n                    ? getStartOfWeek(selected, _this.props.locale, _this.props.calendarStartDay)\n                    : _this.props.selected;\n            };\n            var selected = _this.props.selected\n                ? isSelected(_this.props.selected)\n                : undefined;\n            var preSelection = _this.props.preSelection\n                ? isPreSelected(_this.props.preSelection)\n                : undefined;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                weeks.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Week, _assign({}, _this.props, { ariaLabelPrefix: _this.props.weekAriaLabelPrefix, key: i, day: currentWeekStart, month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.day), onDayClick: _this.handleDayClick, onDayMouseEnter: _this.handleDayMouseEnter, selected: selected, preSelection: preSelection, showWeekNumber: _this.props.showWeekNumbers })));\n                if (breakAfterNextPush)\n                    break;\n                i++;\n                currentWeekStart = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_58__.addWeeks)(currentWeekStart, 1);\n                // If one of these conditions is true, we will either break on this week\n                // or break on the next week\n                var isFixedAndFinalWeek = isFixedHeight && i >= FIXED_HEIGHT_STANDARD_WEEK_COUNT;\n                var isNonFixedAndOutOfMonth = !isFixedHeight && !_this.isWeekInMonth(currentWeekStart);\n                if (isFixedAndFinalWeek || isNonFixedAndOutOfMonth) {\n                    if (_this.props.peekNextMonth) {\n                        breakAfterNextPush = true;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            return weeks;\n        };\n        _this.onMonthClick = function (event, m) {\n            var _a = _this.isMonthDisabledForLabelDate(m), isDisabled = _a.isDisabled, labelDate = _a.labelDate;\n            if (isDisabled) {\n                return;\n            }\n            _this.handleDayClick(getStartOfMonth(labelDate), event);\n        };\n        _this.onMonthMouseEnter = function (m) {\n            var _a = _this.isMonthDisabledForLabelDate(m), isDisabled = _a.isDisabled, labelDate = _a.labelDate;\n            if (isDisabled) {\n                return;\n            }\n            _this.handleDayMouseEnter(getStartOfMonth(labelDate));\n        };\n        _this.handleMonthNavigation = function (newMonth, newDate) {\n            var _a, _b, _c, _d;\n            (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, newDate);\n            (_d = (_c = _this.MONTH_REFS[newMonth]) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();\n        };\n        _this.handleKeyboardNavigation = function (event, eventKey, month) {\n            var _a;\n            var _b = _this.props, selected = _b.selected, preSelection = _b.preSelection, setPreSelection = _b.setPreSelection, minDate = _b.minDate, maxDate = _b.maxDate, showFourColumnMonthYearPicker = _b.showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker = _b.showTwoColumnMonthYearPicker;\n            if (!preSelection)\n                return;\n            var monthColumnsLayout = getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker);\n            var verticalOffset = _this.getVerticalOffset(monthColumnsLayout);\n            var monthsGrid = (_a = MONTH_COLUMNS[monthColumnsLayout]) === null || _a === void 0 ? void 0 : _a.grid;\n            var calculateNewDateAndMonth = function (eventKey, date, month) {\n                var _a, _b;\n                var newCalculatedDate = date;\n                var newCalculatedMonth = month;\n                switch (eventKey) {\n                    case KeyType.ArrowRight:\n                        newCalculatedDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(date, MONTH_NAVIGATION_HORIZONTAL_OFFSET);\n                        newCalculatedMonth =\n                            month === 11 ? 0 : month + MONTH_NAVIGATION_HORIZONTAL_OFFSET;\n                        break;\n                    case KeyType.ArrowLeft:\n                        newCalculatedDate = (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(date, MONTH_NAVIGATION_HORIZONTAL_OFFSET);\n                        newCalculatedMonth =\n                            month === 0 ? 11 : month - MONTH_NAVIGATION_HORIZONTAL_OFFSET;\n                        break;\n                    case KeyType.ArrowUp:\n                        newCalculatedDate = (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(date, verticalOffset);\n                        newCalculatedMonth = ((_a = monthsGrid === null || monthsGrid === void 0 ? void 0 : monthsGrid[0]) === null || _a === void 0 ? void 0 : _a.includes(month))\n                            ? month + 12 - verticalOffset\n                            : month - verticalOffset;\n                        break;\n                    case KeyType.ArrowDown:\n                        newCalculatedDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(date, verticalOffset);\n                        newCalculatedMonth = ((_b = monthsGrid === null || monthsGrid === void 0 ? void 0 : monthsGrid[monthsGrid.length - 1]) === null || _b === void 0 ? void 0 : _b.includes(month))\n                            ? month - 12 + verticalOffset\n                            : month + verticalOffset;\n                        break;\n                }\n                return { newCalculatedDate: newCalculatedDate, newCalculatedMonth: newCalculatedMonth };\n            };\n            var getNewDateAndMonth = function (eventKey, selectedDate, month) {\n                var MAX_ITERATIONS = 40;\n                var eventKeyCopy = eventKey;\n                var validDateFound = false;\n                var iterations = 0;\n                var _a = calculateNewDateAndMonth(eventKeyCopy, selectedDate, month), newCalculatedDate = _a.newCalculatedDate, newCalculatedMonth = _a.newCalculatedMonth;\n                while (!validDateFound) {\n                    if (iterations >= MAX_ITERATIONS) {\n                        newCalculatedDate = selectedDate;\n                        newCalculatedMonth = month;\n                        break;\n                    }\n                    // if minDate exists and the new month is before the minimum month, it will try to find the next available month after\n                    if (minDate && newCalculatedDate < minDate) {\n                        eventKeyCopy = KeyType.ArrowRight;\n                        var obj = calculateNewDateAndMonth(eventKeyCopy, newCalculatedDate, newCalculatedMonth);\n                        newCalculatedDate = obj.newCalculatedDate;\n                        newCalculatedMonth = obj.newCalculatedMonth;\n                    }\n                    // if maxDate exists and the new month is after the maximum month, it will try to find the next available month before\n                    if (maxDate && newCalculatedDate > maxDate) {\n                        eventKeyCopy = KeyType.ArrowLeft;\n                        var obj = calculateNewDateAndMonth(eventKeyCopy, newCalculatedDate, newCalculatedMonth);\n                        newCalculatedDate = obj.newCalculatedDate;\n                        newCalculatedMonth = obj.newCalculatedMonth;\n                    }\n                    if (isMonthYearDisabled(newCalculatedDate, _this.props)) {\n                        var obj = calculateNewDateAndMonth(eventKeyCopy, newCalculatedDate, newCalculatedMonth);\n                        newCalculatedDate = obj.newCalculatedDate;\n                        newCalculatedMonth = obj.newCalculatedMonth;\n                    }\n                    else {\n                        validDateFound = true;\n                    }\n                    iterations++;\n                }\n                return { newCalculatedDate: newCalculatedDate, newCalculatedMonth: newCalculatedMonth };\n            };\n            if (eventKey === KeyType.Enter) {\n                if (!_this.isMonthDisabled(month)) {\n                    _this.onMonthClick(event, month);\n                    setPreSelection === null || setPreSelection === void 0 ? void 0 : setPreSelection(selected);\n                }\n                return;\n            }\n            var _c = getNewDateAndMonth(eventKey, preSelection, month), newCalculatedDate = _c.newCalculatedDate, newCalculatedMonth = _c.newCalculatedMonth;\n            switch (eventKey) {\n                case KeyType.ArrowRight:\n                case KeyType.ArrowLeft:\n                case KeyType.ArrowUp:\n                case KeyType.ArrowDown:\n                    _this.handleMonthNavigation(newCalculatedMonth, newCalculatedDate);\n                    break;\n            }\n        };\n        _this.getVerticalOffset = function (monthColumnsLayout) {\n            var _a, _b;\n            return (_b = (_a = MONTH_COLUMNS[monthColumnsLayout]) === null || _a === void 0 ? void 0 : _a.verticalNavigationOffset) !== null && _b !== void 0 ? _b : 0;\n        };\n        _this.onMonthKeyDown = function (event, month) {\n            var _a = _this.props, disabledKeyboardNavigation = _a.disabledKeyboardNavigation, handleOnMonthKeyDown = _a.handleOnMonthKeyDown;\n            var eventKey = event.key;\n            if (eventKey !== KeyType.Tab) {\n                // preventDefault on tab event blocks focus change\n                event.preventDefault();\n            }\n            if (!disabledKeyboardNavigation) {\n                _this.handleKeyboardNavigation(event, eventKey, month);\n            }\n            handleOnMonthKeyDown && handleOnMonthKeyDown(event);\n        };\n        _this.onQuarterClick = function (event, q) {\n            var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n            if (isQuarterDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayClick(getStartOfQuarter(labelDate), event);\n        };\n        _this.onQuarterMouseEnter = function (q) {\n            var labelDate = (0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(_this.props.day, q);\n            if (isQuarterDisabled(labelDate, _this.props)) {\n                return;\n            }\n            _this.handleDayMouseEnter(getStartOfQuarter(labelDate));\n        };\n        _this.handleQuarterNavigation = function (newQuarter, newDate) {\n            var _a, _b, _c, _d;\n            if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) {\n                return;\n            }\n            (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, newDate);\n            (_d = (_c = _this.QUARTER_REFS[newQuarter - 1]) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();\n        };\n        _this.onQuarterKeyDown = function (event, quarter) {\n            var _a, _b;\n            var eventKey = event.key;\n            if (!_this.props.disabledKeyboardNavigation) {\n                switch (eventKey) {\n                    case KeyType.Enter:\n                        _this.onQuarterClick(event, quarter);\n                        (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, _this.props.selected);\n                        break;\n                    case KeyType.ArrowRight:\n                        if (!_this.props.preSelection) {\n                            break;\n                        }\n                        _this.handleQuarterNavigation(quarter === 4 ? 1 : quarter + 1, (0,date_fns_addQuarters__WEBPACK_IMPORTED_MODULE_44__.addQuarters)(_this.props.preSelection, 1));\n                        break;\n                    case KeyType.ArrowLeft:\n                        if (!_this.props.preSelection) {\n                            break;\n                        }\n                        _this.handleQuarterNavigation(quarter === 1 ? 4 : quarter - 1, (0,date_fns_subQuarters__WEBPACK_IMPORTED_MODULE_42__.subQuarters)(_this.props.preSelection, 1));\n                        break;\n                }\n            }\n        };\n        _this.isMonthDisabledForLabelDate = function (month) {\n            var _a;\n            var _b = _this.props, day = _b.day, minDate = _b.minDate, maxDate = _b.maxDate, excludeDates = _b.excludeDates, includeDates = _b.includeDates;\n            var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\n            return {\n                isDisabled: (_a = ((minDate || maxDate || excludeDates || includeDates) &&\n                    isMonthDisabled(labelDate, _this.props))) !== null && _a !== void 0 ? _a : false,\n                labelDate: labelDate,\n            };\n        };\n        _this.isMonthDisabled = function (month) {\n            var isDisabled = _this.isMonthDisabledForLabelDate(month).isDisabled;\n            return isDisabled;\n        };\n        _this.getMonthClassNames = function (m) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate, selected = _a.selected, preSelection = _a.preSelection, monthClassName = _a.monthClassName;\n            var _monthClassName = monthClassName\n                ? monthClassName((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, m))\n                : undefined;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__month-text\", \"react-datepicker__month-\".concat(m), _monthClassName, {\n                \"react-datepicker__month-text--disabled\": _this.isMonthDisabled(m),\n                \"react-datepicker__month-text--selected\": selected\n                    ? _this.isSelectedMonth(day, m, selected)\n                    : undefined,\n                \"react-datepicker__month-text--keyboard-selected\": !_this.props.disabledKeyboardNavigation &&\n                    preSelection &&\n                    _this.isSelectedMonth(day, m, preSelection),\n                \"react-datepicker__month-text--in-selecting-range\": _this.isInSelectingRangeMonth(m),\n                \"react-datepicker__month-text--in-range\": startDate && endDate\n                    ? isMonthInRange(startDate, endDate, m, day)\n                    : undefined,\n                \"react-datepicker__month-text--range-start\": _this.isRangeStartMonth(m),\n                \"react-datepicker__month-text--range-end\": _this.isRangeEndMonth(m),\n                \"react-datepicker__month-text--selecting-range-start\": _this.isSelectingMonthRangeStart(m),\n                \"react-datepicker__month-text--selecting-range-end\": _this.isSelectingMonthRangeEnd(m),\n                \"react-datepicker__month-text--today\": _this.isCurrentMonth(day, m),\n            });\n        };\n        _this.getTabIndex = function (m) {\n            if (_this.props.preSelection == null) {\n                return \"-1\";\n            }\n            var preSelectedMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.props.preSelection);\n            var tabIndex = !_this.props.disabledKeyboardNavigation && m === preSelectedMonth\n                ? \"0\"\n                : \"-1\";\n            return tabIndex;\n        };\n        _this.getQuarterTabIndex = function (q) {\n            if (_this.props.preSelection == null) {\n                return \"-1\";\n            }\n            var preSelectedQuarter = (0,date_fns_getQuarter__WEBPACK_IMPORTED_MODULE_34__.getQuarter)(_this.props.preSelection);\n            var tabIndex = !_this.props.disabledKeyboardNavigation && q === preSelectedQuarter\n                ? \"0\"\n                : \"-1\";\n            return tabIndex;\n        };\n        _this.getAriaLabel = function (month) {\n            var _a = _this.props, _b = _a.chooseDayAriaLabelPrefix, chooseDayAriaLabelPrefix = _b === void 0 ? \"Choose\" : _b, _c = _a.disabledDayAriaLabelPrefix, disabledDayAriaLabelPrefix = _c === void 0 ? \"Not available\" : _c, day = _a.day, locale = _a.locale;\n            var labelDate = (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(day, month);\n            var prefix = _this.isDisabled(labelDate) || _this.isExcluded(labelDate)\n                ? disabledDayAriaLabelPrefix\n                : chooseDayAriaLabelPrefix;\n            return \"\".concat(prefix, \" \").concat(formatDate(labelDate, \"MMMM yyyy\", locale));\n        };\n        _this.getQuarterClassNames = function (q) {\n            var _a = _this.props, day = _a.day, startDate = _a.startDate, endDate = _a.endDate, selected = _a.selected, minDate = _a.minDate, maxDate = _a.maxDate, preSelection = _a.preSelection, disabledKeyboardNavigation = _a.disabledKeyboardNavigation;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__quarter-text\", \"react-datepicker__quarter-\".concat(q), {\n                \"react-datepicker__quarter-text--disabled\": (minDate || maxDate) &&\n                    isQuarterDisabled((0,date_fns_setQuarter__WEBPACK_IMPORTED_MODULE_29__.setQuarter)(day, q), _this.props),\n                \"react-datepicker__quarter-text--selected\": selected\n                    ? _this.isSelectedQuarter(day, q, selected)\n                    : undefined,\n                \"react-datepicker__quarter-text--keyboard-selected\": !disabledKeyboardNavigation &&\n                    preSelection &&\n                    _this.isSelectedQuarter(day, q, preSelection),\n                \"react-datepicker__quarter-text--in-selecting-range\": _this.isInSelectingRangeQuarter(q),\n                \"react-datepicker__quarter-text--in-range\": startDate && endDate\n                    ? isQuarterInRange(startDate, endDate, q, day)\n                    : undefined,\n                \"react-datepicker__quarter-text--range-start\": _this.isRangeStartQuarter(q),\n                \"react-datepicker__quarter-text--range-end\": _this.isRangeEndQuarter(q),\n            });\n        };\n        _this.getMonthContent = function (m) {\n            var _a = _this.props, showFullMonthYearPicker = _a.showFullMonthYearPicker, renderMonthContent = _a.renderMonthContent, locale = _a.locale, day = _a.day;\n            var shortMonthText = getMonthShortInLocale(m, locale);\n            var fullMonthText = getMonthInLocale(m, locale);\n            if (renderMonthContent) {\n                return renderMonthContent(m, shortMonthText, fullMonthText, day);\n            }\n            return showFullMonthYearPicker ? fullMonthText : shortMonthText;\n        };\n        _this.getQuarterContent = function (q) {\n            var _a;\n            var _b = _this.props, renderQuarterContent = _b.renderQuarterContent, locale = _b.locale;\n            var shortQuarter = getQuarterShortInLocale(q, locale);\n            return (_a = renderQuarterContent === null || renderQuarterContent === void 0 ? void 0 : renderQuarterContent(q, shortQuarter)) !== null && _a !== void 0 ? _a : shortQuarter;\n        };\n        _this.renderMonths = function () {\n            var _a;\n            var _b = _this.props, showTwoColumnMonthYearPicker = _b.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker = _b.showFourColumnMonthYearPicker, day = _b.day, selected = _b.selected;\n            var monthColumns = (_a = MONTH_COLUMNS[getMonthColumnsLayout(showFourColumnMonthYearPicker, showTwoColumnMonthYearPicker)]) === null || _a === void 0 ? void 0 : _a.grid;\n            return monthColumns === null || monthColumns === void 0 ? void 0 : monthColumns.map(function (month, i) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__month-wrapper\", key: i }, month.map(function (m, j) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { ref: _this.MONTH_REFS[m], key: j, onClick: function (event) {\n                    _this.onMonthClick(event, m);\n                }, onKeyDown: function (event) {\n                    if (isSpaceKeyDown(event)) {\n                        event.preventDefault();\n                        event.key = KeyType.Enter;\n                    }\n                    _this.onMonthKeyDown(event, m);\n                }, onMouseEnter: !_this.props.usePointerEvent\n                    ? function () { return _this.onMonthMouseEnter(m); }\n                    : undefined, onPointerEnter: _this.props.usePointerEvent\n                    ? function () { return _this.onMonthMouseEnter(m); }\n                    : undefined, tabIndex: Number(_this.getTabIndex(m)), className: _this.getMonthClassNames(m), \"aria-disabled\": _this.isMonthDisabled(m), role: \"option\", \"aria-label\": _this.getAriaLabel(m), \"aria-current\": _this.isCurrentMonth(day, m) ? \"date\" : undefined, \"aria-selected\": selected ? _this.isSelectedMonth(day, m, selected) : undefined }, _this.getMonthContent(m))); }))); });\n        };\n        _this.renderQuarters = function () {\n            var _a = _this.props, day = _a.day, selected = _a.selected;\n            var quarters = [1, 2, 3, 4];\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__quarter-wrapper\" }, quarters.map(function (q, j) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: j, ref: _this.QUARTER_REFS[j], role: \"option\", onClick: function (event) {\n                    _this.onQuarterClick(event, q);\n                }, onKeyDown: function (event) {\n                    _this.onQuarterKeyDown(event, q);\n                }, onMouseEnter: !_this.props.usePointerEvent\n                    ? function () { return _this.onQuarterMouseEnter(q); }\n                    : undefined, onPointerEnter: _this.props.usePointerEvent\n                    ? function () { return _this.onQuarterMouseEnter(q); }\n                    : undefined, className: _this.getQuarterClassNames(q), \"aria-selected\": selected ? _this.isSelectedQuarter(day, q, selected) : undefined, tabIndex: Number(_this.getQuarterTabIndex(q)), \"aria-current\": _this.isCurrentQuarter(day, q) ? \"date\" : undefined }, _this.getQuarterContent(q))); })));\n        };\n        _this.getClassNames = function () {\n            var _a = _this.props, selectingDate = _a.selectingDate, selectsStart = _a.selectsStart, selectsEnd = _a.selectsEnd, showMonthYearPicker = _a.showMonthYearPicker, showQuarterYearPicker = _a.showQuarterYearPicker, showWeekPicker = _a.showWeekPicker;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__month\", {\n                \"react-datepicker__month--selecting-range\": selectingDate && (selectsStart || selectsEnd),\n            }, { \"react-datepicker__monthPicker\": showMonthYearPicker }, { \"react-datepicker__quarterPicker\": showQuarterYearPicker }, { \"react-datepicker__weekPicker\": showWeekPicker });\n        };\n        return _this;\n    }\n    Month.prototype.render = function () {\n        var _a = this.props, showMonthYearPicker = _a.showMonthYearPicker, showQuarterYearPicker = _a.showQuarterYearPicker, day = _a.day, _b = _a.ariaLabelPrefix, ariaLabelPrefix = _b === void 0 ? \"Month \" : _b;\n        var formattedAriaLabelPrefix = ariaLabelPrefix\n            ? ariaLabelPrefix.trim() + \" \"\n            : \"\";\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: this.getClassNames(), onMouseLeave: !this.props.usePointerEvent ? this.handleMouseLeave : undefined, onPointerLeave: this.props.usePointerEvent ? this.handleMouseLeave : undefined, \"aria-label\": \"\".concat(formattedAriaLabelPrefix).concat(formatDate(day, \"MMMM, yyyy\", this.props.locale)), role: \"listbox\" }, showMonthYearPicker\n            ? this.renderMonths()\n            : showQuarterYearPicker\n                ? this.renderQuarters()\n                : this.renderWeeks()));\n    };\n    return Month;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar MonthDropdownOptions = /** @class */ (function (_super) {\n    __extends(MonthDropdownOptions, _super);\n    function MonthDropdownOptions() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isSelectedMonth = function (i) { return _this.props.month === i; };\n        _this.renderOptions = function () {\n            return _this.props.monthNames.map(function (month, i) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: _this.isSelectedMonth(i)\n                    ? \"react-datepicker__month-option react-datepicker__month-option--selected_month\"\n                    : \"react-datepicker__month-option\", key: month, onClick: _this.onChange.bind(_this, i), \"aria-selected\": _this.isSelectedMonth(i) ? \"true\" : undefined },\n                _this.isSelectedMonth(i) ? (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__month-option--selected\" }, \"\\u2713\")) : (\"\"),\n                month)); });\n        };\n        _this.onChange = function (month) { return _this.props.onChange(month); };\n        _this.handleClickOutside = function () { return _this.props.onCancel(); };\n        return _this;\n    }\n    MonthDropdownOptions.prototype.render = function () {\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__month-dropdown\" }, this.renderOptions()));\n    };\n    return MonthDropdownOptions;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar WrappedMonthDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthDropdownOptions);\nvar MonthDropdown = /** @class */ (function (_super) {\n    __extends(MonthDropdown, _super);\n    function MonthDropdown() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            dropdownVisible: false,\n        };\n        _this.renderSelectOptions = function (monthNames) {\n            return monthNames.map(function (m, i) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", { key: m, value: i }, m)); });\n        };\n        _this.renderSelectMode = function (monthNames) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", { value: _this.props.month, className: \"react-datepicker__month-select\", onChange: function (e) { return _this.onChange(parseInt(e.target.value)); } }, _this.renderSelectOptions(monthNames))); };\n        _this.renderReadView = function (visible, monthNames) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: \"read\", style: { visibility: visible ? \"visible\" : \"hidden\" }, className: \"react-datepicker__month-read-view\", onClick: _this.toggleDropdown },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__month-read-view--down-arrow\" }),\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__month-read-view--selected-month\" }, monthNames[_this.props.month]))); };\n        _this.renderDropdown = function (monthNames) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(WrappedMonthDropdownOptions, _assign({ key: \"dropdown\" }, _this.props, { monthNames: monthNames, onChange: _this.onChange, onCancel: _this.toggleDropdown }))); };\n        _this.renderScrollMode = function (monthNames) {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [_this.renderReadView(!dropdownVisible, monthNames)];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown(monthNames));\n            }\n            return result;\n        };\n        _this.onChange = function (month) {\n            _this.toggleDropdown();\n            if (month !== _this.props.month) {\n                _this.props.onChange(month);\n            }\n        };\n        _this.toggleDropdown = function () {\n            return _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible,\n            });\n        };\n        return _this;\n    }\n    MonthDropdown.prototype.render = function () {\n        var _this = this;\n        var monthNames = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.props.useShortMonthInDropdown\n            ? function (m) { return getMonthShortInLocale(m, _this.props.locale); }\n            : function (m) { return getMonthInLocale(m, _this.props.locale); });\n        var renderedDropdown;\n        switch (this.props.dropdownMode) {\n            case \"scroll\":\n                renderedDropdown = this.renderScrollMode(monthNames);\n                break;\n            case \"select\":\n                renderedDropdown = this.renderSelectMode(monthNames);\n                break;\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--\".concat(this.props.dropdownMode) }, renderedDropdown));\n    };\n    return MonthDropdown;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nfunction generateMonthYears(minDate, maxDate) {\n    var list = [];\n    var currDate = getStartOfMonth(minDate);\n    var lastDate = getStartOfMonth(maxDate);\n    while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\n        list.push(newDate(currDate));\n        currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\n    }\n    return list;\n}\nvar MonthYearDropdownOptions = /** @class */ (function (_super) {\n    __extends(MonthYearDropdownOptions, _super);\n    function MonthYearDropdownOptions(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderOptions = function () {\n            return _this.state.monthYearsList.map(function (monthYear) {\n                var monthYearPoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_59__.getTime)(monthYear);\n                var isSameMonthYear = isSameYear(_this.props.date, monthYear) &&\n                    isSameMonth(_this.props.date, monthYear);\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: isSameMonthYear\n                        ? \"react-datepicker__month-year-option--selected_month-year\"\n                        : \"react-datepicker__month-year-option\", key: monthYearPoint, onClick: _this.onChange.bind(_this, monthYearPoint), \"aria-selected\": isSameMonthYear ? \"true\" : undefined },\n                    isSameMonthYear ? (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__month-year-option--selected\" }, \"\\u2713\")) : (\"\"),\n                    formatDate(monthYear, _this.props.dateFormat, _this.props.locale)));\n            });\n        };\n        _this.onChange = function (monthYear) { return _this.props.onChange(monthYear); };\n        _this.handleClickOutside = function () {\n            _this.props.onCancel();\n        };\n        _this.state = {\n            monthYearsList: generateMonthYears(_this.props.minDate, _this.props.maxDate),\n        };\n        return _this;\n    }\n    MonthYearDropdownOptions.prototype.render = function () {\n        var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)({\n            \"react-datepicker__month-year-dropdown\": true,\n            \"react-datepicker__month-year-dropdown--scrollable\": this.props.scrollableMonthYearDropdown,\n        });\n        return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: dropdownClass }, this.renderOptions());\n    };\n    return MonthYearDropdownOptions;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar WrappedMonthYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(MonthYearDropdownOptions);\nvar MonthYearDropdown = /** @class */ (function (_super) {\n    __extends(MonthYearDropdown, _super);\n    function MonthYearDropdown() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            dropdownVisible: false,\n        };\n        _this.renderSelectOptions = function () {\n            var currDate = getStartOfMonth(_this.props.minDate);\n            var lastDate = getStartOfMonth(_this.props.maxDate);\n            var options = [];\n            while (!(0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(currDate, lastDate)) {\n                var timePoint = (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_59__.getTime)(currDate);\n                options.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", { key: timePoint, value: timePoint }, formatDate(currDate, _this.props.dateFormat, _this.props.locale)));\n                currDate = (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(currDate, 1);\n            }\n            return options;\n        };\n        _this.onSelectChange = function (event) {\n            _this.onChange(parseInt(event.target.value));\n        };\n        _this.renderSelectMode = function () { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", { value: (0,date_fns_getTime__WEBPACK_IMPORTED_MODULE_59__.getTime)(getStartOfMonth(_this.props.date)), className: \"react-datepicker__month-year-select\", onChange: _this.onSelectChange }, _this.renderSelectOptions())); };\n        _this.renderReadView = function (visible) {\n            var yearMonth = formatDate(_this.props.date, _this.props.dateFormat, _this.props.locale);\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: \"read\", style: { visibility: visible ? \"visible\" : \"hidden\" }, className: \"react-datepicker__month-year-read-view\", onClick: _this.toggleDropdown },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__month-year-read-view--down-arrow\" }),\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__month-year-read-view--selected-month-year\" }, yearMonth)));\n        };\n        _this.renderDropdown = function () { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(WrappedMonthYearDropdownOptions, _assign({ key: \"dropdown\" }, _this.props, { onChange: _this.onChange, onCancel: _this.toggleDropdown }))); };\n        _this.renderScrollMode = function () {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [_this.renderReadView(!dropdownVisible)];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown());\n            }\n            return result;\n        };\n        _this.onChange = function (monthYearPoint) {\n            _this.toggleDropdown();\n            var changedDate = newDate(monthYearPoint);\n            if (isSameYear(_this.props.date, changedDate) &&\n                isSameMonth(_this.props.date, changedDate)) {\n                return;\n            }\n            _this.props.onChange(changedDate);\n        };\n        _this.toggleDropdown = function () {\n            return _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible,\n            });\n        };\n        return _this;\n    }\n    MonthYearDropdown.prototype.render = function () {\n        var renderedDropdown;\n        switch (this.props.dropdownMode) {\n            case \"scroll\":\n                renderedDropdown = this.renderScrollMode();\n                break;\n            case \"select\":\n                renderedDropdown = this.renderSelectMode();\n                break;\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--\".concat(this.props.dropdownMode) }, renderedDropdown));\n    };\n    return MonthYearDropdown;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar Time = /** @class */ (function (_super) {\n    __extends(Time, _super);\n    function Time() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            height: null,\n        };\n        _this.scrollToTheSelectedTime = function () {\n            requestAnimationFrame(function () {\n                var _a, _b, _c;\n                if (!_this.list)\n                    return;\n                _this.list.scrollTop =\n                    (_c = (_this.centerLi &&\n                        Time.calcCenterPosition(_this.props.monthRef\n                            ? _this.props.monthRef.clientHeight -\n                                ((_b = (_a = _this.header) === null || _a === void 0 ? void 0 : _a.clientHeight) !== null && _b !== void 0 ? _b : 0)\n                            : _this.list.clientHeight, _this.centerLi))) !== null && _c !== void 0 ? _c : 0;\n            });\n        };\n        _this.handleClick = function (time) {\n            var _a, _b;\n            if (((_this.props.minTime || _this.props.maxTime) &&\n                isTimeInDisabledRange(time, _this.props)) ||\n                ((_this.props.excludeTimes ||\n                    _this.props.includeTimes ||\n                    _this.props.filterTime) &&\n                    isTimeDisabled(time, _this.props))) {\n                return;\n            }\n            (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, time);\n        };\n        _this.isSelectedTime = function (time) {\n            return _this.props.selected && isSameMinute(_this.props.selected, time);\n        };\n        _this.isDisabledTime = function (time) {\n            return ((_this.props.minTime || _this.props.maxTime) &&\n                isTimeInDisabledRange(time, _this.props)) ||\n                ((_this.props.excludeTimes ||\n                    _this.props.includeTimes ||\n                    _this.props.filterTime) &&\n                    isTimeDisabled(time, _this.props));\n        };\n        _this.liClasses = function (time) {\n            var _a;\n            var classes = [\n                \"react-datepicker__time-list-item\",\n                _this.props.timeClassName ? _this.props.timeClassName(time) : undefined,\n            ];\n            if (_this.isSelectedTime(time)) {\n                classes.push(\"react-datepicker__time-list-item--selected\");\n            }\n            if (_this.isDisabledTime(time)) {\n                classes.push(\"react-datepicker__time-list-item--disabled\");\n            }\n            //convert this.props.intervals and the relevant time to seconds and check if it it's a clean multiple of the interval\n            if (_this.props.injectTimes &&\n                ((0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time) * 3600 + (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time) * 60 + (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(time)) %\n                    (((_a = _this.props.intervals) !== null && _a !== void 0 ? _a : Time.defaultProps.intervals) * 60) !==\n                    0) {\n                classes.push(\"react-datepicker__time-list-item--injected\");\n            }\n            return classes.join(\" \");\n        };\n        _this.handleOnKeyDown = function (event, time) {\n            var _a, _b;\n            if (event.key === KeyType.Space) {\n                event.preventDefault();\n                event.key = KeyType.Enter;\n            }\n            if ((event.key === KeyType.ArrowUp || event.key === KeyType.ArrowLeft) &&\n                event.target instanceof HTMLElement &&\n                event.target.previousSibling) {\n                event.preventDefault();\n                event.target.previousSibling instanceof HTMLElement &&\n                    event.target.previousSibling.focus();\n            }\n            if ((event.key === KeyType.ArrowDown || event.key === KeyType.ArrowRight) &&\n                event.target instanceof HTMLElement &&\n                event.target.nextSibling) {\n                event.preventDefault();\n                event.target.nextSibling instanceof HTMLElement &&\n                    event.target.nextSibling.focus();\n            }\n            if (event.key === KeyType.Enter) {\n                _this.handleClick(time);\n            }\n            (_b = (_a = _this.props).handleOnKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        };\n        _this.renderTimes = function () {\n            var _a;\n            var times = [];\n            var format = _this.props.format ? _this.props.format : \"p\";\n            var intervals = (_a = _this.props.intervals) !== null && _a !== void 0 ? _a : Time.defaultProps.intervals;\n            var activeDate = _this.props.selected || _this.props.openToDate || newDate();\n            var base = getStartOfDay(activeDate);\n            var sortedInjectTimes = _this.props.injectTimes &&\n                _this.props.injectTimes.sort(function (a, b) {\n                    return a.getTime() - b.getTime();\n                });\n            var minutesInDay = 60 * getHoursInDay(activeDate);\n            var multiplier = minutesInDay / intervals;\n            for (var i = 0; i < multiplier; i++) {\n                var currentTime = (0,date_fns_addMinutes__WEBPACK_IMPORTED_MODULE_52__.addMinutes)(base, i * intervals);\n                times.push(currentTime);\n                if (sortedInjectTimes) {\n                    var timesToInject = timesToInjectAfter(base, currentTime, i, intervals, sortedInjectTimes);\n                    times = times.concat(timesToInject);\n                }\n            }\n            // Determine which time to focus and scroll into view when component mounts\n            var timeToFocus = times.reduce(function (prev, time) {\n                if (time.getTime() <= activeDate.getTime()) {\n                    return time;\n                }\n                return prev;\n            }, times[0]);\n            return times.map(function (time) {\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"li\", { key: time.valueOf(), onClick: _this.handleClick.bind(_this, time), className: _this.liClasses(time), ref: function (li) {\n                        if (time === timeToFocus) {\n                            _this.centerLi = li;\n                        }\n                    }, onKeyDown: function (event) {\n                        _this.handleOnKeyDown(event, time);\n                    }, tabIndex: time === timeToFocus ? 0 : -1, role: \"option\", \"aria-selected\": _this.isSelectedTime(time) ? \"true\" : undefined, \"aria-disabled\": _this.isDisabledTime(time) ? \"true\" : undefined }, formatDate(time, format, _this.props.locale)));\n            });\n        };\n        return _this;\n    }\n    Object.defineProperty(Time, \"defaultProps\", {\n        get: function () {\n            return {\n                intervals: 30,\n                todayButton: null,\n                timeCaption: \"Time\",\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Time.prototype.componentDidMount = function () {\n        // code to ensure selected time will always be in focus within time window when it first appears\n        this.scrollToTheSelectedTime();\n        if (this.props.monthRef && this.header) {\n            this.setState({\n                height: this.props.monthRef.clientHeight - this.header.clientHeight,\n            });\n        }\n    };\n    Time.prototype.render = function () {\n        var _this = this;\n        var _a;\n        var height = this.state.height;\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__time-container \".concat(((_a = this.props.todayButton) !== null && _a !== void 0 ? _a : Time.defaultProps.todayButton)\n                ? \"react-datepicker__time-container--with-today-button\"\n                : \"\") },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__header react-datepicker__header--time \".concat(this.props.showTimeSelectOnly\n                    ? \"react-datepicker__header--time--only\"\n                    : \"\"), ref: function (header) {\n                    _this.header = header;\n                } },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker-time__header\" }, this.props.timeCaption)),\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__time\" },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__time-box\" },\n                    react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"ul\", { className: \"react-datepicker__time-list\", ref: function (list) {\n                            _this.list = list;\n                        }, style: height ? { height: height } : {}, role: \"listbox\", \"aria-label\": this.props.timeCaption }, this.renderTimes())))));\n    };\n    Time.calcCenterPosition = function (listHeight, centerLiRef) {\n        return (centerLiRef.offsetTop - (listHeight / 2 - centerLiRef.clientHeight / 2));\n    };\n    return Time;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar VERTICAL_NAVIGATION_OFFSET = 3;\n/**\n * `Year` is a component that represents a year in a date picker.\n *\n * @class\n * @param {YearProps} props - The properties that define the `Year` component.\n * @property {VoidFunction} [props.clearSelectingDate] - Function to clear the selected date.\n * @property {Date} [props.date] - The currently selected date.\n * @property {boolean} [props.disabledKeyboardNavigation] - If true, keyboard navigation is disabled.\n * @property {Date} [props.endDate] - The end date in a range selection.\n * @property {(date: Date) => void} props.onDayClick - Function to handle day click events.\n * @property {Date} props.preSelection - The date that is currently in focus.\n * @property {(date: Date) => void} props.setPreSelection - Function to set the pre-selected date.\n * @property {{ [key: string]: any }} props.selected - The selected date(s).\n * @property {boolean} props.inline - If true, the date picker is displayed inline.\n * @property {Date} props.maxDate - The maximum selectable date.\n * @property {Date} props.minDate - The minimum selectable date.\n * @property {boolean} props.usePointerEvent - If true, pointer events are used instead of mouse events.\n * @property {(date: Date) => void} props.onYearMouseEnter - Function to handle mouse enter events on a year.\n * @property {(date: Date) => void} props.onYearMouseLeave - Function to handle mouse leave events on a year.\n */\nvar Year = /** @class */ (function (_super) {\n    __extends(Year, _super);\n    function Year(props) {\n        var _this = _super.call(this, props) || this;\n        _this.YEAR_REFS = __spreadArray([], Array(_this.props.yearItemNumber), true).map(function () {\n            return (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        });\n        _this.isDisabled = function (date) {\n            return isDayDisabled(date, {\n                minDate: _this.props.minDate,\n                maxDate: _this.props.maxDate,\n                excludeDates: _this.props.excludeDates,\n                includeDates: _this.props.includeDates,\n                filterDate: _this.props.filterDate,\n            });\n        };\n        _this.isExcluded = function (date) {\n            return isDayExcluded(date, {\n                excludeDates: _this.props.excludeDates,\n            });\n        };\n        _this.selectingDate = function () { var _a; return (_a = _this.props.selectingDate) !== null && _a !== void 0 ? _a : _this.props.preSelection; };\n        _this.updateFocusOnPaginate = function (refIndex) {\n            var waitForReRender = function () {\n                var _a, _b;\n                (_b = (_a = _this.YEAR_REFS[refIndex]) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.focus();\n            };\n            window.requestAnimationFrame(waitForReRender);\n        };\n        _this.handleYearClick = function (day, event) {\n            if (_this.props.onDayClick) {\n                _this.props.onDayClick(day, event);\n            }\n        };\n        _this.handleYearNavigation = function (newYear, newDate) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, date = _e.date, yearItemNumber = _e.yearItemNumber;\n            if (date === undefined || yearItemNumber === undefined) {\n                return;\n            }\n            var startPeriod = getYearsPeriod(date, yearItemNumber).startPeriod;\n            if (_this.isDisabled(newDate) || _this.isExcluded(newDate)) {\n                return;\n            }\n            (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, newDate);\n            if (newYear - startPeriod < 0) {\n                _this.updateFocusOnPaginate(yearItemNumber - (startPeriod - newYear));\n            }\n            else if (newYear - startPeriod >= yearItemNumber) {\n                _this.updateFocusOnPaginate(Math.abs(yearItemNumber - (newYear - startPeriod)));\n            }\n            else\n                (_d = (_c = _this.YEAR_REFS[newYear - startPeriod]) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();\n        };\n        _this.isSameDay = function (y, other) { return isSameDay(y, other); };\n        _this.isCurrentYear = function (y) { return y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newDate()); };\n        _this.isRangeStart = function (y) {\n            return _this.props.startDate &&\n                _this.props.endDate &&\n                isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.startDate);\n        };\n        _this.isRangeEnd = function (y) {\n            return _this.props.startDate &&\n                _this.props.endDate &&\n                isSameYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y), _this.props.endDate);\n        };\n        _this.isInRange = function (y) {\n            return isYearInRange(y, _this.props.startDate, _this.props.endDate);\n        };\n        _this.isInSelectingRange = function (y) {\n            var _a = _this.props, selectsStart = _a.selectsStart, selectsEnd = _a.selectsEnd, selectsRange = _a.selectsRange, startDate = _a.startDate, endDate = _a.endDate;\n            if (!(selectsStart || selectsEnd || selectsRange) ||\n                !_this.selectingDate()) {\n                return false;\n            }\n            if (selectsStart && endDate) {\n                return isYearInRange(y, _this.selectingDate(), endDate);\n            }\n            if (selectsEnd && startDate) {\n                return isYearInRange(y, startDate, _this.selectingDate());\n            }\n            if (selectsRange && startDate && !endDate) {\n                return isYearInRange(y, startDate, _this.selectingDate());\n            }\n            return false;\n        };\n        _this.isSelectingRangeStart = function (y) {\n            var _a;\n            if (!_this.isInSelectingRange(y)) {\n                return false;\n            }\n            var _b = _this.props, startDate = _b.startDate, selectsStart = _b.selectsStart;\n            var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n            if (selectsStart) {\n                return isSameYear(_year, (_a = _this.selectingDate()) !== null && _a !== void 0 ? _a : null);\n            }\n            return isSameYear(_year, startDate !== null && startDate !== void 0 ? startDate : null);\n        };\n        _this.isSelectingRangeEnd = function (y) {\n            var _a;\n            if (!_this.isInSelectingRange(y)) {\n                return false;\n            }\n            var _b = _this.props, endDate = _b.endDate, selectsEnd = _b.selectsEnd, selectsRange = _b.selectsRange;\n            var _year = (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), y);\n            if (selectsEnd || selectsRange) {\n                return isSameYear(_year, (_a = _this.selectingDate()) !== null && _a !== void 0 ? _a : null);\n            }\n            return isSameYear(_year, endDate !== null && endDate !== void 0 ? endDate : null);\n        };\n        _this.isKeyboardSelected = function (y) {\n            if (_this.props.date === undefined ||\n                _this.props.selected == null ||\n                _this.props.preSelection == null) {\n                return;\n            }\n            var date = getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(_this.props.date, y));\n            return (!_this.props.disabledKeyboardNavigation &&\n                !_this.props.inline &&\n                !isSameDay(date, getStartOfYear(_this.props.selected)) &&\n                isSameDay(date, getStartOfYear(_this.props.preSelection)));\n        };\n        _this.onYearClick = function (event, y) {\n            var date = _this.props.date;\n            if (date === undefined) {\n                return;\n            }\n            _this.handleYearClick(getStartOfYear((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)), event);\n        };\n        _this.onYearKeyDown = function (event, y) {\n            var _a, _b;\n            var key = event.key;\n            var _c = _this.props, date = _c.date, yearItemNumber = _c.yearItemNumber, handleOnKeyDown = _c.handleOnKeyDown;\n            if (key !== KeyType.Tab) {\n                // preventDefault on tab event blocks focus change\n                event.preventDefault();\n            }\n            if (!_this.props.disabledKeyboardNavigation) {\n                switch (key) {\n                    case KeyType.Enter:\n                        if (_this.props.selected == null) {\n                            break;\n                        }\n                        _this.onYearClick(event, y);\n                        (_b = (_a = _this.props).setPreSelection) === null || _b === void 0 ? void 0 : _b.call(_a, _this.props.selected);\n                        break;\n                    case KeyType.ArrowRight:\n                        if (_this.props.preSelection == null) {\n                            break;\n                        }\n                        _this.handleYearNavigation(y + 1, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, 1));\n                        break;\n                    case KeyType.ArrowLeft:\n                        if (_this.props.preSelection == null) {\n                            break;\n                        }\n                        _this.handleYearNavigation(y - 1, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, 1));\n                        break;\n                    case KeyType.ArrowUp: {\n                        if (date === undefined ||\n                            yearItemNumber === undefined ||\n                            _this.props.preSelection == null) {\n                            break;\n                        }\n                        var startPeriod = getYearsPeriod(date, yearItemNumber).startPeriod;\n                        var offset = VERTICAL_NAVIGATION_OFFSET;\n                        var newYear = y - offset;\n                        if (newYear < startPeriod) {\n                            var leftOverOffset = yearItemNumber % offset;\n                            if (y >= startPeriod && y < startPeriod + leftOverOffset) {\n                                offset = leftOverOffset;\n                            }\n                            else {\n                                offset += leftOverOffset;\n                            }\n                            newYear = y - offset;\n                        }\n                        _this.handleYearNavigation(newYear, (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(_this.props.preSelection, offset));\n                        break;\n                    }\n                    case KeyType.ArrowDown: {\n                        if (date === undefined ||\n                            yearItemNumber === undefined ||\n                            _this.props.preSelection == null) {\n                            break;\n                        }\n                        var endPeriod = getYearsPeriod(date, yearItemNumber).endPeriod;\n                        var offset = VERTICAL_NAVIGATION_OFFSET;\n                        var newYear = y + offset;\n                        if (newYear > endPeriod) {\n                            var leftOverOffset = yearItemNumber % offset;\n                            if (y <= endPeriod && y > endPeriod - leftOverOffset) {\n                                offset = leftOverOffset;\n                            }\n                            else {\n                                offset += leftOverOffset;\n                            }\n                            newYear = y + offset;\n                        }\n                        _this.handleYearNavigation(newYear, (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.props.preSelection, offset));\n                        break;\n                    }\n                }\n            }\n            handleOnKeyDown && handleOnKeyDown(event);\n        };\n        _this.getYearClassNames = function (y) {\n            var _a = _this.props, date = _a.date, minDate = _a.minDate, maxDate = _a.maxDate, selected = _a.selected, excludeDates = _a.excludeDates, includeDates = _a.includeDates, filterDate = _a.filterDate, yearClassName = _a.yearClassName;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__year-text\", \"react-datepicker__year-\".concat(y), date ? yearClassName === null || yearClassName === void 0 ? void 0 : yearClassName((0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, y)) : undefined, {\n                \"react-datepicker__year-text--selected\": selected\n                    ? y === (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(selected)\n                    : undefined,\n                \"react-datepicker__year-text--disabled\": (minDate || maxDate || excludeDates || includeDates || filterDate) &&\n                    isYearDisabled(y, _this.props),\n                \"react-datepicker__year-text--keyboard-selected\": _this.isKeyboardSelected(y),\n                \"react-datepicker__year-text--range-start\": _this.isRangeStart(y),\n                \"react-datepicker__year-text--range-end\": _this.isRangeEnd(y),\n                \"react-datepicker__year-text--in-range\": _this.isInRange(y),\n                \"react-datepicker__year-text--in-selecting-range\": _this.isInSelectingRange(y),\n                \"react-datepicker__year-text--selecting-range-start\": _this.isSelectingRangeStart(y),\n                \"react-datepicker__year-text--selecting-range-end\": _this.isSelectingRangeEnd(y),\n                \"react-datepicker__year-text--today\": _this.isCurrentYear(y),\n            });\n        };\n        _this.getYearTabIndex = function (y) {\n            if (_this.props.disabledKeyboardNavigation ||\n                _this.props.preSelection == null) {\n                return \"-1\";\n            }\n            var preSelected = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.preSelection);\n            return y === preSelected ? \"0\" : \"-1\";\n        };\n        _this.getYearContainerClassNames = function () {\n            var _a = _this.props, selectingDate = _a.selectingDate, selectsStart = _a.selectsStart, selectsEnd = _a.selectsEnd, selectsRange = _a.selectsRange;\n            return (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__year\", {\n                \"react-datepicker__year--selecting-range\": selectingDate && (selectsStart || selectsEnd || selectsRange),\n            });\n        };\n        _this.getYearContent = function (y) {\n            return _this.props.renderYearContent ? _this.props.renderYearContent(y) : y;\n        };\n        return _this;\n    }\n    Year.prototype.render = function () {\n        var _this = this;\n        var yearsList = [];\n        var _a = this.props, date = _a.date, yearItemNumber = _a.yearItemNumber, onYearMouseEnter = _a.onYearMouseEnter, onYearMouseLeave = _a.onYearMouseLeave;\n        if (date === undefined) {\n            return null;\n        }\n        var _b = getYearsPeriod(date, yearItemNumber), startPeriod = _b.startPeriod, endPeriod = _b.endPeriod;\n        var _loop_1 = function (y) {\n            yearsList.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { ref: this_1.YEAR_REFS[y - startPeriod], onClick: function (event) {\n                    _this.onYearClick(event, y);\n                }, onKeyDown: function (event) {\n                    if (isSpaceKeyDown(event)) {\n                        event.preventDefault();\n                        event.key = KeyType.Enter;\n                    }\n                    _this.onYearKeyDown(event, y);\n                }, tabIndex: Number(this_1.getYearTabIndex(y)), className: this_1.getYearClassNames(y), onMouseEnter: !this_1.props.usePointerEvent\n                    ? function (event) { return onYearMouseEnter(event, y); }\n                    : undefined, onPointerEnter: this_1.props.usePointerEvent\n                    ? function (event) { return onYearMouseEnter(event, y); }\n                    : undefined, onMouseLeave: !this_1.props.usePointerEvent\n                    ? function (event) { return onYearMouseLeave(event, y); }\n                    : undefined, onPointerLeave: this_1.props.usePointerEvent\n                    ? function (event) { return onYearMouseLeave(event, y); }\n                    : undefined, key: y, \"aria-current\": this_1.isCurrentYear(y) ? \"date\" : undefined }, this_1.getYearContent(y)));\n        };\n        var this_1 = this;\n        for (var y = startPeriod; y <= endPeriod; y++) {\n            _loop_1(y);\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: this.getYearContainerClassNames() },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__year-wrapper\", onMouseLeave: !this.props.usePointerEvent\n                    ? this.props.clearSelectingDate\n                    : undefined, onPointerLeave: this.props.usePointerEvent\n                    ? this.props.clearSelectingDate\n                    : undefined }, yearsList)));\n    };\n    return Year;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nfunction generateYears(year, noOfYear, minDate, maxDate) {\n    var list = [];\n    for (var i = 0; i < 2 * noOfYear + 1; i++) {\n        var newYear = year + noOfYear - i;\n        var isInRange = true;\n        if (minDate) {\n            isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(minDate) <= newYear;\n        }\n        if (maxDate && isInRange) {\n            isInRange = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(maxDate) >= newYear;\n        }\n        if (isInRange) {\n            list.push(newYear);\n        }\n    }\n    return list;\n}\nvar YearDropdownOptions = /** @class */ (function (_super) {\n    __extends(YearDropdownOptions, _super);\n    function YearDropdownOptions(props) {\n        var _this = _super.call(this, props) || this;\n        _this.renderOptions = function () {\n            var selectedYear = _this.props.year;\n            var options = _this.state.yearsList.map(function (year) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: selectedYear === year\n                    ? \"react-datepicker__year-option react-datepicker__year-option--selected_year\"\n                    : \"react-datepicker__year-option\", key: year, onClick: _this.onChange.bind(_this, year), \"aria-selected\": selectedYear === year ? \"true\" : undefined },\n                selectedYear === year ? (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__year-option--selected\" }, \"\\u2713\")) : (\"\"),\n                year)); });\n            var minYear = _this.props.minDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate) : null;\n            var maxYear = _this.props.maxDate ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate) : null;\n            if (!maxYear || !_this.state.yearsList.find(function (year) { return year === maxYear; })) {\n                options.unshift(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__year-option\", key: \"upcoming\", onClick: _this.incrementYears },\n                    react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", { className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming\" })));\n            }\n            if (!minYear || !_this.state.yearsList.find(function (year) { return year === minYear; })) {\n                options.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__year-option\", key: \"previous\", onClick: _this.decrementYears },\n                    react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", { className: \"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous\" })));\n            }\n            return options;\n        };\n        _this.onChange = function (year) {\n            _this.props.onChange(year);\n        };\n        _this.handleClickOutside = function () {\n            _this.props.onCancel();\n        };\n        _this.shiftYears = function (amount) {\n            var years = _this.state.yearsList.map(function (year) {\n                return year + amount;\n            });\n            _this.setState({\n                yearsList: years,\n            });\n        };\n        _this.incrementYears = function () {\n            return _this.shiftYears(1);\n        };\n        _this.decrementYears = function () {\n            return _this.shiftYears(-1);\n        };\n        var yearDropdownItemNumber = props.yearDropdownItemNumber, scrollableYearDropdown = props.scrollableYearDropdown;\n        var noOfYear = yearDropdownItemNumber || (scrollableYearDropdown ? 10 : 5);\n        _this.state = {\n            yearsList: generateYears(_this.props.year, noOfYear, _this.props.minDate, _this.props.maxDate),\n        };\n        _this.dropdownRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    }\n    YearDropdownOptions.prototype.componentDidMount = function () {\n        var dropdownCurrent = this.dropdownRef.current;\n        if (dropdownCurrent) {\n            // Get array from HTMLCollection\n            var dropdownCurrentChildren = dropdownCurrent.children\n                ? Array.from(dropdownCurrent.children)\n                : null;\n            var selectedYearOptionEl = dropdownCurrentChildren\n                ? dropdownCurrentChildren.find(function (childEl) { return childEl.ariaSelected; })\n                : null;\n            dropdownCurrent.scrollTop =\n                selectedYearOptionEl && selectedYearOptionEl instanceof HTMLElement\n                    ? selectedYearOptionEl.offsetTop +\n                        (selectedYearOptionEl.clientHeight - dropdownCurrent.clientHeight) /\n                            2\n                    : (dropdownCurrent.scrollHeight - dropdownCurrent.clientHeight) / 2;\n        }\n    };\n    YearDropdownOptions.prototype.render = function () {\n        var dropdownClass = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)({\n            \"react-datepicker__year-dropdown\": true,\n            \"react-datepicker__year-dropdown--scrollable\": this.props.scrollableYearDropdown,\n        });\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: dropdownClass, ref: this.dropdownRef }, this.renderOptions()));\n    };\n    return YearDropdownOptions;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar WrappedYearDropdownOptions = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(YearDropdownOptions);\nvar YearDropdown = /** @class */ (function (_super) {\n    __extends(YearDropdown, _super);\n    function YearDropdown() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            dropdownVisible: false,\n        };\n        _this.renderSelectOptions = function () {\n            var minYear = _this.props.minDate\n                ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.minDate)\n                : 1900;\n            var maxYear = _this.props.maxDate\n                ? (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.props.maxDate)\n                : 2100;\n            var options = [];\n            for (var i = minYear; i <= maxYear; i++) {\n                options.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", { key: i, value: i }, i));\n            }\n            return options;\n        };\n        _this.onSelectChange = function (event) {\n            _this.onChange(parseInt(event.target.value));\n        };\n        _this.renderSelectMode = function () { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", { value: _this.props.year, className: \"react-datepicker__year-select\", onChange: _this.onSelectChange }, _this.renderSelectOptions())); };\n        _this.renderReadView = function (visible) { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: \"read\", style: { visibility: visible ? \"visible\" : \"hidden\" }, className: \"react-datepicker__year-read-view\", onClick: function (event) {\n                return _this.toggleDropdown(event);\n            } },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__year-read-view--down-arrow\" }),\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: \"react-datepicker__year-read-view--selected-year\" }, _this.props.year))); };\n        _this.renderDropdown = function () { return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(WrappedYearDropdownOptions, _assign({ key: \"dropdown\" }, _this.props, { onChange: _this.onChange, onCancel: _this.toggleDropdown }))); };\n        _this.renderScrollMode = function () {\n            var dropdownVisible = _this.state.dropdownVisible;\n            var result = [_this.renderReadView(!dropdownVisible)];\n            if (dropdownVisible) {\n                result.unshift(_this.renderDropdown());\n            }\n            return result;\n        };\n        _this.onChange = function (year) {\n            _this.toggleDropdown();\n            if (year === _this.props.year)\n                return;\n            _this.props.onChange(year);\n        };\n        _this.toggleDropdown = function (event) {\n            _this.setState({\n                dropdownVisible: !_this.state.dropdownVisible,\n            }, function () {\n                if (_this.props.adjustDateOnChange) {\n                    _this.handleYearChange(_this.props.date, event);\n                }\n            });\n        };\n        _this.handleYearChange = function (date, event) {\n            _this.onSelect(date, event);\n            _this.setOpen();\n        };\n        _this.onSelect = function (date, event) {\n            if (_this.props.onSelect) {\n                _this.props.onSelect(date, event);\n            }\n        };\n        _this.setOpen = function () {\n            if (_this.props.setOpen) {\n                _this.props.setOpen(true);\n            }\n        };\n        return _this;\n    }\n    YearDropdown.prototype.render = function () {\n        var renderedDropdown;\n        switch (this.props.dropdownMode) {\n            case \"scroll\":\n                renderedDropdown = this.renderScrollMode();\n                break;\n            case \"select\":\n                renderedDropdown = this.renderSelectMode();\n                break;\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--\".concat(this.props.dropdownMode) }, renderedDropdown));\n    };\n    return YearDropdown;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar DROPDOWN_FOCUS_CLASSNAMES = [\n    \"react-datepicker__year-select\",\n    \"react-datepicker__month-select\",\n    \"react-datepicker__month-year-select\",\n];\nvar isDropdownSelect = function (element) {\n    var classNames = (element.className || \"\").split(/\\s+/);\n    return DROPDOWN_FOCUS_CLASSNAMES.some(function (testClassname) { return classNames.indexOf(testClassname) >= 0; });\n};\nvar Calendar = /** @class */ (function (_super) {\n    __extends(Calendar, _super);\n    function Calendar(props) {\n        var _this = _super.call(this, props) || this;\n        _this.monthContainer = undefined;\n        _this.handleClickOutside = function (event) {\n            _this.props.onClickOutside(event);\n        };\n        _this.setClickOutsideRef = function () {\n            return _this.containerRef.current;\n        };\n        _this.handleDropdownFocus = function (event) {\n            var _a, _b;\n            if (isDropdownSelect(event.target)) {\n                (_b = (_a = _this.props).onDropdownFocus) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            }\n        };\n        _this.getDateInView = function () {\n            var _a = _this.props, preSelection = _a.preSelection, selected = _a.selected, openToDate = _a.openToDate;\n            var minDate = getEffectiveMinDate(_this.props);\n            var maxDate = getEffectiveMaxDate(_this.props);\n            var current = newDate();\n            var initialDate = openToDate || selected || preSelection;\n            if (initialDate) {\n                return initialDate;\n            }\n            else {\n                if (minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(current, minDate)) {\n                    return minDate;\n                }\n                else if (maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(current, maxDate)) {\n                    return maxDate;\n                }\n            }\n            return current;\n        };\n        _this.increaseMonth = function () {\n            _this.setState(function (_a) {\n                var date = _a.date;\n                return ({\n                    date: (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(date, 1),\n                });\n            }, function () { return _this.handleMonthChange(_this.state.date); });\n        };\n        _this.decreaseMonth = function () {\n            _this.setState(function (_a) {\n                var date = _a.date;\n                return ({\n                    date: (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(date, 1),\n                });\n            }, function () { return _this.handleMonthChange(_this.state.date); });\n        };\n        _this.handleDayClick = function (day, event, monthSelectedIn) {\n            _this.props.onSelect(day, event, monthSelectedIn);\n            _this.props.setPreSelection && _this.props.setPreSelection(day);\n        };\n        _this.handleDayMouseEnter = function (day) {\n            _this.setState({ selectingDate: day });\n            _this.props.onDayMouseEnter && _this.props.onDayMouseEnter(day);\n        };\n        _this.handleMonthMouseLeave = function () {\n            _this.setState({ selectingDate: undefined });\n            _this.props.onMonthMouseLeave && _this.props.onMonthMouseLeave();\n        };\n        _this.handleYearMouseEnter = function (event, year) {\n            _this.setState({ selectingDate: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(newDate(), year) });\n            !!_this.props.onYearMouseEnter && _this.props.onYearMouseEnter(event, year);\n        };\n        _this.handleYearMouseLeave = function (event, year) {\n            !!_this.props.onYearMouseLeave && _this.props.onYearMouseLeave(event, year);\n        };\n        _this.handleYearChange = function (date) {\n            if (_this.props.onYearChange) {\n                _this.props.onYearChange(date);\n                _this.setState({ isRenderAriaLiveMessage: true });\n            }\n            if (_this.props.adjustDateOnChange) {\n                if (_this.props.onSelect) {\n                    _this.props.onSelect(date);\n                }\n                if (_this.props.setOpen) {\n                    _this.props.setOpen(true);\n                }\n            }\n            _this.props.setPreSelection && _this.props.setPreSelection(date);\n        };\n        _this.handleMonthChange = function (date) {\n            _this.handleCustomMonthChange(date);\n            if (_this.props.adjustDateOnChange) {\n                if (_this.props.onSelect) {\n                    _this.props.onSelect(date);\n                }\n                if (_this.props.setOpen) {\n                    _this.props.setOpen(true);\n                }\n            }\n            _this.props.setPreSelection && _this.props.setPreSelection(date);\n        };\n        _this.handleCustomMonthChange = function (date) {\n            if (_this.props.onMonthChange) {\n                _this.props.onMonthChange(date);\n                _this.setState({ isRenderAriaLiveMessage: true });\n            }\n        };\n        _this.handleMonthYearChange = function (date) {\n            _this.handleYearChange(date);\n            _this.handleMonthChange(date);\n        };\n        _this.changeYear = function (year) {\n            _this.setState(function (_a) {\n                var date = _a.date;\n                return ({\n                    date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)(date, Number(year)),\n                });\n            }, function () { return _this.handleYearChange(_this.state.date); });\n        };\n        _this.changeMonth = function (month) {\n            _this.setState(function (_a) {\n                var date = _a.date;\n                return ({\n                    date: (0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, Number(month)),\n                });\n            }, function () { return _this.handleMonthChange(_this.state.date); });\n        };\n        _this.changeMonthYear = function (monthYear) {\n            _this.setState(function (_a) {\n                var date = _a.date;\n                return ({\n                    date: (0,date_fns_setYear__WEBPACK_IMPORTED_MODULE_60__.setYear)((0,date_fns_setMonth__WEBPACK_IMPORTED_MODULE_28__.setMonth)(date, (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(monthYear)), (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthYear)),\n                });\n            }, function () { return _this.handleMonthYearChange(_this.state.date); });\n        };\n        _this.header = function (date) {\n            if (date === void 0) { date = _this.state.date; }\n            var startOfWeek = getStartOfWeek(date, _this.props.locale, _this.props.calendarStartDay);\n            var dayNames = [];\n            if (_this.props.showWeekNumbers) {\n                dayNames.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: \"W\", className: \"react-datepicker__day-name\" }, _this.props.weekLabel || \"#\"));\n            }\n            return dayNames.concat([0, 1, 2, 3, 4, 5, 6].map(function (offset) {\n                var day = (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_57__.addDays)(startOfWeek, offset);\n                var weekDayName = _this.formatWeekday(day, _this.props.locale);\n                var weekDayClassName = _this.props.weekDayClassName\n                    ? _this.props.weekDayClassName(day)\n                    : undefined;\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: offset, \"aria-label\": formatDate(day, \"EEEE\", _this.props.locale), className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__day-name\", weekDayClassName) }, weekDayName));\n            }));\n        };\n        _this.formatWeekday = function (day, locale) {\n            if (_this.props.formatWeekDay) {\n                return getFormattedWeekdayInLocale(day, _this.props.formatWeekDay, locale);\n            }\n            return _this.props.useWeekdaysShort\n                ? getWeekdayShortInLocale(day, locale)\n                : getWeekdayMinInLocale(day, locale);\n        };\n        _this.decreaseYear = function () {\n            _this.setState(function (_a) {\n                var _b;\n                var date = _a.date;\n                return ({\n                    date: (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(date, _this.props.showYearPicker\n                        ? (_b = _this.props.yearItemNumber) !== null && _b !== void 0 ? _b : Calendar.defaultProps.yearItemNumber\n                        : 1),\n                });\n            }, function () { return _this.handleYearChange(_this.state.date); });\n        };\n        _this.clearSelectingDate = function () {\n            _this.setState({ selectingDate: undefined });\n        };\n        _this.renderPreviousButton = function () {\n            var _a;\n            if (_this.props.renderCustomHeader) {\n                return;\n            }\n            var allPrevDaysDisabled;\n            switch (true) {\n                case _this.props.showMonthYearPicker:\n                    allPrevDaysDisabled = yearDisabledBefore(_this.state.date, _this.props);\n                    break;\n                case _this.props.showYearPicker:\n                    allPrevDaysDisabled = yearsDisabledBefore(_this.state.date, _this.props);\n                    break;\n                case _this.props.showQuarterYearPicker:\n                    allPrevDaysDisabled = quarterDisabledBefore(_this.state.date, _this.props);\n                    break;\n                default:\n                    allPrevDaysDisabled = monthDisabledBefore(_this.state.date, _this.props);\n                    break;\n            }\n            if ((!((_a = _this.props.forceShowMonthNavigation) !== null && _a !== void 0 ? _a : Calendar.defaultProps.forceShowMonthNavigation) &&\n                !_this.props.showDisabledMonthNavigation &&\n                allPrevDaysDisabled) ||\n                _this.props.showTimeSelectOnly) {\n                return;\n            }\n            var iconClasses = [\n                \"react-datepicker__navigation-icon\",\n                \"react-datepicker__navigation-icon--previous\",\n            ];\n            var classes = [\n                \"react-datepicker__navigation\",\n                \"react-datepicker__navigation--previous\",\n            ];\n            var clickHandler = _this.decreaseMonth;\n            if (_this.props.showMonthYearPicker ||\n                _this.props.showQuarterYearPicker ||\n                _this.props.showYearPicker) {\n                clickHandler = _this.decreaseYear;\n            }\n            if (allPrevDaysDisabled && _this.props.showDisabledMonthNavigation) {\n                classes.push(\"react-datepicker__navigation--previous--disabled\");\n                clickHandler = undefined;\n            }\n            var isForYear = _this.props.showMonthYearPicker ||\n                _this.props.showQuarterYearPicker ||\n                _this.props.showYearPicker;\n            var _b = _this.props, _c = _b.previousMonthButtonLabel, previousMonthButtonLabel = _c === void 0 ? Calendar.defaultProps.previousMonthButtonLabel : _c, _d = _b.previousYearButtonLabel, previousYearButtonLabel = _d === void 0 ? Calendar.defaultProps.previousYearButtonLabel : _d;\n            var _e = _this.props, _f = _e.previousMonthAriaLabel, previousMonthAriaLabel = _f === void 0 ? typeof previousMonthButtonLabel === \"string\"\n                ? previousMonthButtonLabel\n                : \"Previous Month\" : _f, _g = _e.previousYearAriaLabel, previousYearAriaLabel = _g === void 0 ? typeof previousYearButtonLabel === \"string\"\n                ? previousYearButtonLabel\n                : \"Previous Year\" : _g;\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", { type: \"button\", className: classes.join(\" \"), onClick: clickHandler, onKeyDown: _this.props.handleOnKeyDown, \"aria-label\": isForYear ? previousYearAriaLabel : previousMonthAriaLabel },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: iconClasses.join(\" \") }, isForYear ? previousYearButtonLabel : previousMonthButtonLabel)));\n        };\n        _this.increaseYear = function () {\n            _this.setState(function (_a) {\n                var _b;\n                var date = _a.date;\n                return ({\n                    date: (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(date, _this.props.showYearPicker\n                        ? (_b = _this.props.yearItemNumber) !== null && _b !== void 0 ? _b : Calendar.defaultProps.yearItemNumber\n                        : 1),\n                });\n            }, function () { return _this.handleYearChange(_this.state.date); });\n        };\n        _this.renderNextButton = function () {\n            var _a;\n            if (_this.props.renderCustomHeader) {\n                return;\n            }\n            var allNextDaysDisabled;\n            switch (true) {\n                case _this.props.showMonthYearPicker:\n                    allNextDaysDisabled = yearDisabledAfter(_this.state.date, _this.props);\n                    break;\n                case _this.props.showYearPicker:\n                    allNextDaysDisabled = yearsDisabledAfter(_this.state.date, _this.props);\n                    break;\n                case _this.props.showQuarterYearPicker:\n                    allNextDaysDisabled = quarterDisabledAfter(_this.state.date, _this.props);\n                    break;\n                default:\n                    allNextDaysDisabled = monthDisabledAfter(_this.state.date, _this.props);\n                    break;\n            }\n            if ((!((_a = _this.props.forceShowMonthNavigation) !== null && _a !== void 0 ? _a : Calendar.defaultProps.forceShowMonthNavigation) &&\n                !_this.props.showDisabledMonthNavigation &&\n                allNextDaysDisabled) ||\n                _this.props.showTimeSelectOnly) {\n                return;\n            }\n            var classes = [\n                \"react-datepicker__navigation\",\n                \"react-datepicker__navigation--next\",\n            ];\n            var iconClasses = [\n                \"react-datepicker__navigation-icon\",\n                \"react-datepicker__navigation-icon--next\",\n            ];\n            if (_this.props.showTimeSelect) {\n                classes.push(\"react-datepicker__navigation--next--with-time\");\n            }\n            if (_this.props.todayButton) {\n                classes.push(\"react-datepicker__navigation--next--with-today-button\");\n            }\n            var clickHandler = _this.increaseMonth;\n            if (_this.props.showMonthYearPicker ||\n                _this.props.showQuarterYearPicker ||\n                _this.props.showYearPicker) {\n                clickHandler = _this.increaseYear;\n            }\n            if (allNextDaysDisabled && _this.props.showDisabledMonthNavigation) {\n                classes.push(\"react-datepicker__navigation--next--disabled\");\n                clickHandler = undefined;\n            }\n            var isForYear = _this.props.showMonthYearPicker ||\n                _this.props.showQuarterYearPicker ||\n                _this.props.showYearPicker;\n            var _b = _this.props, _c = _b.nextMonthButtonLabel, nextMonthButtonLabel = _c === void 0 ? Calendar.defaultProps.nextMonthButtonLabel : _c, _d = _b.nextYearButtonLabel, nextYearButtonLabel = _d === void 0 ? Calendar.defaultProps.nextYearButtonLabel : _d;\n            var _e = _this.props, _f = _e.nextMonthAriaLabel, nextMonthAriaLabel = _f === void 0 ? typeof nextMonthButtonLabel === \"string\"\n                ? nextMonthButtonLabel\n                : \"Next Month\" : _f, _g = _e.nextYearAriaLabel, nextYearAriaLabel = _g === void 0 ? typeof nextYearButtonLabel === \"string\"\n                ? nextYearButtonLabel\n                : \"Next Year\" : _g;\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", { type: \"button\", className: classes.join(\" \"), onClick: clickHandler, onKeyDown: _this.props.handleOnKeyDown, \"aria-label\": isForYear ? nextYearAriaLabel : nextMonthAriaLabel },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { className: iconClasses.join(\" \") }, isForYear ? nextYearButtonLabel : nextMonthButtonLabel)));\n        };\n        _this.renderCurrentMonth = function (date) {\n            if (date === void 0) { date = _this.state.date; }\n            var classes = [\"react-datepicker__current-month\"];\n            if (_this.props.showYearDropdown) {\n                classes.push(\"react-datepicker__current-month--hasYearDropdown\");\n            }\n            if (_this.props.showMonthDropdown) {\n                classes.push(\"react-datepicker__current-month--hasMonthDropdown\");\n            }\n            if (_this.props.showMonthYearDropdown) {\n                classes.push(\"react-datepicker__current-month--hasMonthYearDropdown\");\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h2\", { className: classes.join(\" \") }, formatDate(date, _this.props.dateFormat, _this.props.locale)));\n        };\n        _this.renderYearDropdown = function (overrideHide) {\n            if (overrideHide === void 0) { overrideHide = false; }\n            if (!_this.props.showYearDropdown || overrideHide) {\n                return;\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(YearDropdown, _assign({}, Calendar.defaultProps, _this.props, { date: _this.state.date, onChange: _this.changeYear, year: (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date) })));\n        };\n        _this.renderMonthDropdown = function (overrideHide) {\n            if (overrideHide === void 0) { overrideHide = false; }\n            if (!_this.props.showMonthDropdown || overrideHide) {\n                return;\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MonthDropdown, _assign({}, Calendar.defaultProps, _this.props, { month: (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date), onChange: _this.changeMonth })));\n        };\n        _this.renderMonthYearDropdown = function (overrideHide) {\n            if (overrideHide === void 0) { overrideHide = false; }\n            if (!_this.props.showMonthYearDropdown || overrideHide) {\n                return;\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MonthYearDropdown, _assign({}, Calendar.defaultProps, _this.props, { date: _this.state.date, onChange: _this.changeMonthYear })));\n        };\n        _this.handleTodayButtonClick = function (event) {\n            _this.props.onSelect(getStartOfToday(), event);\n            _this.props.setPreSelection && _this.props.setPreSelection(getStartOfToday());\n        };\n        _this.renderTodayButton = function () {\n            if (!_this.props.todayButton || _this.props.showTimeSelectOnly) {\n                return;\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__today-button\", onClick: _this.handleTodayButtonClick }, _this.props.todayButton));\n        };\n        _this.renderDefaultHeader = function (_a) {\n            var monthDate = _a.monthDate, i = _a.i;\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__header \".concat(_this.props.showTimeSelect\n                    ? \"react-datepicker__header--has-time-select\"\n                    : \"\") },\n                _this.renderCurrentMonth(monthDate),\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__header__dropdown react-datepicker__header__dropdown--\".concat(_this.props.dropdownMode), onFocus: _this.handleDropdownFocus },\n                    _this.renderMonthDropdown(i !== 0),\n                    _this.renderMonthYearDropdown(i !== 0),\n                    _this.renderYearDropdown(i !== 0)),\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__day-names\" }, _this.header(monthDate))));\n        };\n        _this.renderCustomHeader = function (headerArgs) {\n            var _a, _b;\n            var monthDate = headerArgs.monthDate, i = headerArgs.i;\n            if ((_this.props.showTimeSelect && !_this.state.monthContainer) ||\n                _this.props.showTimeSelectOnly) {\n                return null;\n            }\n            var prevMonthButtonDisabled = monthDisabledBefore(_this.state.date, _this.props);\n            var nextMonthButtonDisabled = monthDisabledAfter(_this.state.date, _this.props);\n            var prevYearButtonDisabled = yearDisabledBefore(_this.state.date, _this.props);\n            var nextYearButtonDisabled = yearDisabledAfter(_this.state.date, _this.props);\n            var showDayNames = !_this.props.showMonthYearPicker &&\n                !_this.props.showQuarterYearPicker &&\n                !_this.props.showYearPicker;\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__header react-datepicker__header--custom\", onFocus: _this.props.onDropdownFocus }, (_b = (_a = _this.props).renderCustomHeader) === null || _b === void 0 ? void 0 :\n                _b.call(_a, _assign(_assign({}, _this.state), { customHeaderCount: i, monthDate: monthDate, changeMonth: _this.changeMonth, changeYear: _this.changeYear, decreaseMonth: _this.decreaseMonth, increaseMonth: _this.increaseMonth, decreaseYear: _this.decreaseYear, increaseYear: _this.increaseYear, prevMonthButtonDisabled: prevMonthButtonDisabled, nextMonthButtonDisabled: nextMonthButtonDisabled, prevYearButtonDisabled: prevYearButtonDisabled, nextYearButtonDisabled: nextYearButtonDisabled })),\n                showDayNames && (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__day-names\" }, _this.header(monthDate)))));\n        };\n        _this.renderYearHeader = function (_a) {\n            var monthDate = _a.monthDate;\n            var _b = _this.props, showYearPicker = _b.showYearPicker, _c = _b.yearItemNumber, yearItemNumber = _c === void 0 ? Calendar.defaultProps.yearItemNumber : _c;\n            var _d = getYearsPeriod(monthDate, yearItemNumber), startPeriod = _d.startPeriod, endPeriod = _d.endPeriod;\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__header react-datepicker-year-header\" }, showYearPicker ? \"\".concat(startPeriod, \" - \").concat(endPeriod) : (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(monthDate)));\n        };\n        _this.renderHeader = function (_a) {\n            var monthDate = _a.monthDate, _b = _a.i, i = _b === void 0 ? 0 : _b;\n            var headerArgs = { monthDate: monthDate, i: i };\n            switch (true) {\n                case _this.props.renderCustomHeader !== undefined:\n                    return _this.renderCustomHeader(headerArgs);\n                case _this.props.showMonthYearPicker ||\n                    _this.props.showQuarterYearPicker ||\n                    _this.props.showYearPicker:\n                    return _this.renderYearHeader(headerArgs);\n                default:\n                    return _this.renderDefaultHeader(headerArgs);\n            }\n        };\n        _this.renderMonths = function () {\n            var _a, _b;\n            if (_this.props.showTimeSelectOnly || _this.props.showYearPicker) {\n                return;\n            }\n            var monthList = [];\n            var monthsShown = (_a = _this.props.monthsShown) !== null && _a !== void 0 ? _a : Calendar.defaultProps.monthsShown;\n            var monthsToSubtract = _this.props.showPreviousMonths\n                ? monthsShown - 1\n                : 0;\n            var fromMonthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker\n                ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(_this.state.date, monthsToSubtract)\n                : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(_this.state.date, monthsToSubtract);\n            var monthSelectedIn = (_b = _this.props.monthSelectedIn) !== null && _b !== void 0 ? _b : monthsToSubtract;\n            for (var i = 0; i < monthsShown; ++i) {\n                var monthsToAdd = i - monthSelectedIn + monthsToSubtract;\n                var monthDate = _this.props.showMonthYearPicker || _this.props.showQuarterYearPicker\n                    ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(fromMonthDate, monthsToAdd)\n                    : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(fromMonthDate, monthsToAdd);\n                var monthKey = \"month-\".concat(i);\n                var monthShowsDuplicateDaysEnd = i < monthsShown - 1;\n                var monthShowsDuplicateDaysStart = i > 0;\n                monthList.push(react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { key: monthKey, ref: function (div) {\n                        _this.monthContainer = div !== null && div !== void 0 ? div : undefined;\n                    }, className: \"react-datepicker__month-container\" },\n                    _this.renderHeader({ monthDate: monthDate, i: i }),\n                    react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Month, _assign({}, Calendar.defaultProps, _this.props, { ariaLabelPrefix: _this.props.monthAriaLabelPrefix, day: monthDate, onDayClick: _this.handleDayClick, handleOnKeyDown: _this.props.handleOnDayKeyDown, handleOnMonthKeyDown: _this.props.handleOnKeyDown, onDayMouseEnter: _this.handleDayMouseEnter, onMouseLeave: _this.handleMonthMouseLeave, orderInDisplay: i, selectingDate: _this.state.selectingDate, monthShowsDuplicateDaysEnd: monthShowsDuplicateDaysEnd, monthShowsDuplicateDaysStart: monthShowsDuplicateDaysStart }))));\n            }\n            return monthList;\n        };\n        _this.renderYears = function () {\n            if (_this.props.showTimeSelectOnly) {\n                return;\n            }\n            if (_this.props.showYearPicker) {\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__year--container\" },\n                    _this.renderHeader({ monthDate: _this.state.date }),\n                    react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Year, _assign({}, Calendar.defaultProps, _this.props, { selectingDate: _this.state.selectingDate, date: _this.state.date, onDayClick: _this.handleDayClick, clearSelectingDate: _this.clearSelectingDate, onYearMouseEnter: _this.handleYearMouseEnter, onYearMouseLeave: _this.handleYearMouseLeave }))));\n            }\n            return;\n        };\n        _this.renderTimeSection = function () {\n            if (_this.props.showTimeSelect &&\n                (_this.state.monthContainer || _this.props.showTimeSelectOnly)) {\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Time, _assign({}, Calendar.defaultProps, _this.props, { onChange: _this.props.onTimeChange, format: _this.props.timeFormat, intervals: _this.props.timeIntervals, monthRef: _this.state.monthContainer })));\n            }\n            return;\n        };\n        _this.renderInputTimeSection = function () {\n            var time = _this.props.selected\n                ? new Date(_this.props.selected)\n                : undefined;\n            var timeValid = time && isValid(time) && Boolean(_this.props.selected);\n            var timeString = timeValid\n                ? \"\".concat(addZero(time.getHours()), \":\").concat(addZero(time.getMinutes()))\n                : \"\";\n            if (_this.props.showTimeInput) {\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(InputTime, _assign({}, Calendar.defaultProps, _this.props, { date: time, timeString: timeString, onChange: _this.props.onTimeChange })));\n            }\n            return;\n        };\n        _this.renderAriaLiveRegion = function () {\n            var _a;\n            var _b = getYearsPeriod(_this.state.date, (_a = _this.props.yearItemNumber) !== null && _a !== void 0 ? _a : Calendar.defaultProps.yearItemNumber), startPeriod = _b.startPeriod, endPeriod = _b.endPeriod;\n            var ariaLiveMessage;\n            if (_this.props.showYearPicker) {\n                ariaLiveMessage = \"\".concat(startPeriod, \" - \").concat(endPeriod);\n            }\n            else if (_this.props.showMonthYearPicker ||\n                _this.props.showQuarterYearPicker) {\n                ariaLiveMessage = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date);\n            }\n            else {\n                ariaLiveMessage = \"\".concat(getMonthInLocale((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(_this.state.date), _this.props.locale), \" \").concat((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(_this.state.date));\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { role: \"alert\", \"aria-live\": \"polite\", className: \"react-datepicker__aria-live\" }, _this.state.isRenderAriaLiveMessage && ariaLiveMessage));\n        };\n        _this.renderChildren = function () {\n            if (_this.props.children) {\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__children-container\" }, _this.props.children));\n            }\n            return;\n        };\n        _this.containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        _this.state = {\n            date: _this.getDateInView(),\n            selectingDate: undefined,\n            monthContainer: undefined,\n            isRenderAriaLiveMessage: false,\n        };\n        return _this;\n    }\n    Object.defineProperty(Calendar, \"defaultProps\", {\n        get: function () {\n            return {\n                monthsShown: 1,\n                forceShowMonthNavigation: false,\n                timeCaption: \"Time\",\n                previousYearButtonLabel: \"Previous Year\",\n                nextYearButtonLabel: \"Next Year\",\n                previousMonthButtonLabel: \"Previous Month\",\n                nextMonthButtonLabel: \"Next Month\",\n                yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER,\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Calendar.prototype.componentDidMount = function () {\n        var _this = this;\n        // monthContainer height is needed in time component\n        // to determine the height for the ul in the time component\n        // setState here so height is given after final component\n        // layout is rendered\n        if (this.props.showTimeSelect) {\n            this.assignMonthContainer = (function () {\n                _this.setState({ monthContainer: _this.monthContainer });\n            })();\n        }\n    };\n    Calendar.prototype.componentDidUpdate = function (prevProps) {\n        var _this = this;\n        if (this.props.preSelection &&\n            (!isSameDay(this.props.preSelection, prevProps.preSelection) ||\n                this.props.monthSelectedIn !== prevProps.monthSelectedIn)) {\n            var hasMonthChanged_1 = !isSameMonth(this.state.date, this.props.preSelection);\n            this.setState({\n                date: this.props.preSelection,\n            }, function () { return hasMonthChanged_1 && _this.handleCustomMonthChange(_this.state.date); });\n        }\n        else if (this.props.openToDate &&\n            !isSameDay(this.props.openToDate, prevProps.openToDate)) {\n            this.setState({\n                date: this.props.openToDate,\n            });\n        }\n    };\n    Calendar.prototype.render = function () {\n        var Container = this.props.container || CalendarContainer;\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { style: { display: \"contents\" }, ref: this.containerRef },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Container, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker\", this.props.className, {\n                    \"react-datepicker--time-only\": this.props.showTimeSelectOnly,\n                }), showTime: this.props.showTimeSelect || this.props.showTimeInput, showTimeSelectOnly: this.props.showTimeSelectOnly },\n                this.renderAriaLiveRegion(),\n                this.renderPreviousButton(),\n                this.renderNextButton(),\n                this.renderMonths(),\n                this.renderYears(),\n                this.renderTodayButton(),\n                this.renderTimeSection(),\n                this.renderInputTimeSection(),\n                this.renderChildren())));\n    };\n    return Calendar;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\n/**\n * `CalendarIcon` is a React component that renders an icon for a calendar.\n * The icon can be a string representing a CSS class, a React node, or a default SVG icon.\n *\n * @component\n * @prop  icon - The icon to be displayed. This can be a string representing a CSS class or a React node.\n * @prop  className - An optional string representing additional CSS classes to be applied to the icon.\n * @prop  onClick - An optional function to be called when the icon is clicked.\n *\n * @example\n * // To use a CSS class as the icon\n * <CalendarIcon icon=\"my-icon-class\" onClick={myClickHandler} />\n *\n * @example\n * // To use a React node as the icon\n * <CalendarIcon icon={<MyIconComponent />} onClick={myClickHandler} />\n *\n * @returns  The `CalendarIcon` component.\n */\nvar CalendarIcon = function (_a) {\n    var icon = _a.icon, _b = _a.className, className = _b === void 0 ? \"\" : _b, onClick = _a.onClick;\n    var defaultClass = \"react-datepicker__calendar-icon\";\n    if (typeof icon === \"string\") {\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"i\", { className: \"\".concat(defaultClass, \" \").concat(icon, \" \").concat(className), \"aria-hidden\": \"true\", onClick: onClick }));\n    }\n    if (react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(icon)) {\n        // Because we are checking that typeof icon is string first, we can safely cast icon as React.ReactElement on types level and code level\n        return react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(icon, {\n            className: \"\".concat(icon.props.className || \"\", \" \").concat(defaultClass, \" \").concat(className),\n            onClick: function (event) {\n                if (typeof icon.props.onClick === \"function\") {\n                    icon.props.onClick(event);\n                }\n                if (typeof onClick === \"function\") {\n                    onClick(event);\n                }\n            },\n        });\n    }\n    // Default SVG Icon\n    return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", { className: \"\".concat(defaultClass, \" \").concat(className), xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 448 512\", onClick: onClick },\n        react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", { d: \"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z\" })));\n};\n\n/**\n * `Portal` is a React component that allows you to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @class\n * @param {PortalProps} props - The properties that define the `Portal` component.\n * @property {React.ReactNode} props.children - The children to be rendered into the `Portal`.\n * @property {string} props.portalId - The id of the DOM node into which the `Portal` will render.\n * @property {ShadowRoot} [props.portalHost] - The DOM node to host the `Portal`.\n */\nvar Portal = /** @class */ (function (_super) {\n    __extends(Portal, _super);\n    function Portal(props) {\n        var _this = _super.call(this, props) || this;\n        _this.portalRoot = null;\n        _this.el = document.createElement(\"div\");\n        return _this;\n    }\n    Portal.prototype.componentDidMount = function () {\n        this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId);\n        if (!this.portalRoot) {\n            this.portalRoot = document.createElement(\"div\");\n            this.portalRoot.setAttribute(\"id\", this.props.portalId);\n            (this.props.portalHost || document.body).appendChild(this.portalRoot);\n        }\n        this.portalRoot.appendChild(this.el);\n    };\n    Portal.prototype.componentWillUnmount = function () {\n        if (this.portalRoot) {\n            this.portalRoot.removeChild(this.el);\n        }\n    };\n    Portal.prototype.render = function () {\n        return react_dom__WEBPACK_IMPORTED_MODULE_3___default().createPortal(this.props.children, this.el);\n    };\n    return Portal;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\nvar focusableElementsSelector = \"[tabindex], a, button, input, select, textarea\";\nvar focusableFilter = function (node) {\n    if (node instanceof HTMLAnchorElement) {\n        return node.tabIndex !== -1;\n    }\n    return !node.disabled && node.tabIndex !== -1;\n};\n/**\n * `TabLoop` is a React component that manages tabbing behavior for its children.\n *\n * TabLoop prevents the user from tabbing outside of the popper\n * It creates a tabindex loop so that \"Tab\" on the last element will focus the first element\n * and \"Shift Tab\" on the first element will focus the last element\n *\n * @component\n * @example\n * <TabLoop enableTabLoop={true}>\n *   <ChildComponent />\n * </TabLoop>\n *\n * @param props - The properties that define the `TabLoop` component.\n * @param props.children - The child components.\n * @param props.enableTabLoop - Whether to enable the tab loop.\n *\n * @returns The `TabLoop` component.\n */\nvar TabLoop = /** @class */ (function (_super) {\n    __extends(TabLoop, _super);\n    function TabLoop(props) {\n        var _this = _super.call(this, props) || this;\n        /**\n         * `getTabChildren` is a method of the `TabLoop` class that retrieves all tabbable children of the component.\n         *\n         * This method uses the `tabbable` library to find all tabbable elements within the `TabLoop` component.\n         * It then filters out any elements that are not visible.\n         *\n         * @returns An array of all tabbable and visible children of the `TabLoop` component.\n         */\n        _this.getTabChildren = function () {\n            var _a;\n            return Array.prototype.slice\n                .call((_a = _this.tabLoopRef.current) === null || _a === void 0 ? void 0 : _a.querySelectorAll(focusableElementsSelector), 1, -1)\n                .filter(focusableFilter);\n        };\n        _this.handleFocusStart = function () {\n            var tabChildren = _this.getTabChildren();\n            tabChildren &&\n                tabChildren.length > 1 &&\n                tabChildren[tabChildren.length - 1].focus();\n        };\n        _this.handleFocusEnd = function () {\n            var tabChildren = _this.getTabChildren();\n            tabChildren && tabChildren.length > 1 && tabChildren[0].focus();\n        };\n        _this.tabLoopRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.createRef)();\n        return _this;\n    }\n    TabLoop.prototype.render = function () {\n        var _a;\n        if (!((_a = this.props.enableTabLoop) !== null && _a !== void 0 ? _a : TabLoop.defaultProps.enableTabLoop)) {\n            return this.props.children;\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__tab-loop\", ref: this.tabLoopRef },\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__tab-loop__start\", tabIndex: 0, onFocus: this.handleFocusStart }),\n            this.props.children,\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__tab-loop__end\", tabIndex: 0, onFocus: this.handleFocusEnd })));\n    };\n    TabLoop.defaultProps = {\n        enableTabLoop: true,\n    };\n    return TabLoop;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\n\n/**\n * `withFloating` is a higher-order component that adds floating behavior to a component.\n *\n * @param Component - The component to enhance.\n *\n * @example\n * const FloatingComponent = withFloating(MyComponent);\n * <FloatingComponent popperModifiers={[]} popperProps={{}} hidePopper={true} />\n *\n * @param popperModifiers - The modifiers to use for the popper.\n * @param popperProps - The props to pass to the popper.\n * @param hidePopper - Whether to hide the popper.\n * @param popperPlacement - The placement of the popper.\n *\n * @returns A new component with floating behavior.\n */\nfunction withFloating(Component) {\n    var WithFloating = function (props) {\n        var _a;\n        var hidePopper = typeof props.hidePopper === \"boolean\" ? props.hidePopper : true;\n        var arrowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n        var floatingProps = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.useFloating)(_assign({ open: !hidePopper, whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_62__.autoUpdate, placement: props.popperPlacement, middleware: __spreadArray([\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.flip)({ padding: 15 }),\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.offset)(10),\n                (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_63__.arrow)({ element: arrowRef })\n            ], ((_a = props.popperModifiers) !== null && _a !== void 0 ? _a : []), true) }, props.popperProps));\n        var componentProps = _assign(_assign({}, props), { hidePopper: hidePopper, popperProps: _assign(_assign({}, floatingProps), { arrowRef: arrowRef }) });\n        return react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Component, _assign({}, componentProps));\n    };\n    return WithFloating;\n}\n\n// Exported for testing purposes\nvar PopperComponent = /** @class */ (function (_super) {\n    __extends(PopperComponent, _super);\n    function PopperComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(PopperComponent, \"defaultProps\", {\n        get: function () {\n            return {\n                hidePopper: true,\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    PopperComponent.prototype.render = function () {\n        var _a = this.props, className = _a.className, wrapperClassName = _a.wrapperClassName, _b = _a.hidePopper, hidePopper = _b === void 0 ? PopperComponent.defaultProps.hidePopper : _b, popperComponent = _a.popperComponent, targetComponent = _a.targetComponent, enableTabLoop = _a.enableTabLoop, popperOnKeyDown = _a.popperOnKeyDown, portalId = _a.portalId, portalHost = _a.portalHost, popperProps = _a.popperProps, showArrow = _a.showArrow;\n        var popper = undefined;\n        if (!hidePopper) {\n            var classes = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker-popper\", className);\n            popper = (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(TabLoop, { enableTabLoop: enableTabLoop },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { ref: popperProps.refs.setFloating, style: popperProps.floatingStyles, className: classes, \"data-placement\": popperProps.placement, onKeyDown: popperOnKeyDown },\n                    popperComponent,\n                    showArrow && (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_floating_ui_react__WEBPACK_IMPORTED_MODULE_61__.FloatingArrow, { ref: popperProps.arrowRef, context: popperProps.context, fill: \"currentColor\", strokeWidth: 1, height: 8, width: 16, style: { transform: \"translateY(-1px)\" }, className: \"react-datepicker__triangle\" })))));\n        }\n        if (this.props.popperContainer) {\n            popper = (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(this.props.popperContainer, {}, popper);\n        }\n        if (portalId && !hidePopper) {\n            popper = (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, { portalId: portalId, portalHost: portalHost }, popper));\n        }\n        var wrapperClasses = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker-wrapper\", wrapperClassName);\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null,\n            react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { ref: popperProps.refs.setReference, className: wrapperClasses }, targetComponent),\n            popper));\n    };\n    return PopperComponent;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\nvar PopperComponent$1 = withFloating(PopperComponent);\n\nvar outsideClickIgnoreClass = \"react-datepicker-ignore-onclickoutside\";\nvar WrappedCalendar = (0,react_onclickoutside__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Calendar);\n// Compares dates year+month combinations\nfunction hasPreSelectionChanged(date1, date2) {\n    if (date1 && date2) {\n        return ((0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date1) !== (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(date2) || (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date1) !== (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(date2));\n    }\n    return date1 !== date2;\n}\n/**\n * General datepicker component.\n */\nvar INPUT_ERR_1 = \"Date input not valid.\";\nvar DatePicker = /** @class */ (function (_super) {\n    __extends(DatePicker, _super);\n    function DatePicker(props) {\n        var _this = _super.call(this, props) || this;\n        _this.calendar = null;\n        _this.input = null;\n        _this.getPreSelection = function () {\n            return _this.props.openToDate\n                ? _this.props.openToDate\n                : _this.props.selectsEnd && _this.props.startDate\n                    ? _this.props.startDate\n                    : _this.props.selectsStart && _this.props.endDate\n                        ? _this.props.endDate\n                        : newDate();\n        };\n        // Convert the date from string format to standard Date format\n        _this.modifyHolidays = function () {\n            var _a;\n            return (_a = _this.props.holidays) === null || _a === void 0 ? void 0 : _a.reduce(function (accumulator, holiday) {\n                var date = new Date(holiday.date);\n                if (!isValid(date)) {\n                    return accumulator;\n                }\n                return __spreadArray(__spreadArray([], accumulator, true), [_assign(_assign({}, holiday), { date: date })], false);\n            }, []);\n        };\n        _this.calcInitialState = function () {\n            var _a;\n            var defaultPreSelection = _this.getPreSelection();\n            var minDate = getEffectiveMinDate(_this.props);\n            var maxDate = getEffectiveMaxDate(_this.props);\n            var boundedPreSelection = minDate && (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(defaultPreSelection, getStartOfDay(minDate))\n                ? minDate\n                : maxDate && (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(defaultPreSelection, getEndOfDay(maxDate))\n                    ? maxDate\n                    : defaultPreSelection;\n            return {\n                open: _this.props.startOpen || false,\n                preventFocus: false,\n                inputValue: null,\n                preSelection: (_a = (_this.props.selectsRange\n                    ? _this.props.startDate\n                    : _this.props.selected)) !== null && _a !== void 0 ? _a : boundedPreSelection,\n                // transforming highlighted days (perhaps nested array)\n                // to flat Map for faster access in day.jsx\n                highlightDates: getHighLightDaysMap(_this.props.highlightDates),\n                focused: false,\n                // used to focus day in inline version after month has changed, but not on\n                // initial render\n                shouldFocusDayInline: false,\n                isRenderAriaLiveMessage: false,\n                wasHidden: false,\n            };\n        };\n        _this.resetHiddenStatus = function () {\n            _this.setState(_assign(_assign({}, _this.state), { wasHidden: false }));\n        };\n        _this.setHiddenStatus = function () {\n            _this.setState(_assign(_assign({}, _this.state), { wasHidden: true }));\n        };\n        _this.setHiddenStateOnVisibilityHidden = function () {\n            if (document.visibilityState !== \"hidden\") {\n                return;\n            }\n            _this.setHiddenStatus();\n        };\n        _this.clearPreventFocusTimeout = function () {\n            if (_this.preventFocusTimeout) {\n                clearTimeout(_this.preventFocusTimeout);\n            }\n        };\n        _this.setFocus = function () {\n            if (_this.input && _this.input.focus) {\n                _this.input.focus({ preventScroll: true });\n            }\n        };\n        _this.setBlur = function () {\n            if (_this.input && _this.input.blur) {\n                _this.input.blur();\n            }\n            _this.cancelFocusInput();\n        };\n        _this.setOpen = function (open, skipSetBlur) {\n            if (skipSetBlur === void 0) { skipSetBlur = false; }\n            _this.setState({\n                open: open,\n                preSelection: open && _this.state.open\n                    ? _this.state.preSelection\n                    : _this.calcInitialState().preSelection,\n                lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE,\n            }, function () {\n                if (!open) {\n                    _this.setState(function (prev) { return ({\n                        focused: skipSetBlur ? prev.focused : false,\n                    }); }, function () {\n                        !skipSetBlur && _this.setBlur();\n                        _this.setState({ inputValue: null });\n                    });\n                }\n            });\n        };\n        _this.inputOk = function () { return (0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(_this.state.preSelection); };\n        _this.isCalendarOpen = function () {\n            return _this.props.open === undefined\n                ? _this.state.open && !_this.props.disabled && !_this.props.readOnly\n                : _this.props.open;\n        };\n        _this.handleFocus = function (event) {\n            var _a, _b;\n            var isAutoReFocus = _this.state.wasHidden;\n            var isOpenAllowed = isAutoReFocus ? _this.state.open : true;\n            if (isAutoReFocus) {\n                _this.resetHiddenStatus();\n            }\n            if (!_this.state.preventFocus && isOpenAllowed) {\n                (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n                if (!_this.props.preventOpenOnFocus && !_this.props.readOnly) {\n                    _this.setOpen(true);\n                }\n            }\n            _this.setState({ focused: true });\n        };\n        _this.sendFocusBackToInput = function () {\n            // Clear previous timeout if it exists\n            if (_this.preventFocusTimeout) {\n                _this.clearPreventFocusTimeout();\n            }\n            // close the popper and refocus the input\n            // stop the input from auto opening onFocus\n            // setFocus to the input\n            _this.setState({ preventFocus: true }, function () {\n                _this.preventFocusTimeout = setTimeout(function () {\n                    _this.setFocus();\n                    _this.setState({ preventFocus: false });\n                });\n            });\n        };\n        _this.cancelFocusInput = function () {\n            clearTimeout(_this.inputFocusTimeout);\n            _this.inputFocusTimeout = undefined;\n        };\n        _this.deferFocusInput = function () {\n            _this.cancelFocusInput();\n            _this.inputFocusTimeout = setTimeout(function () { return _this.setFocus(); }, 1);\n        };\n        _this.handleDropdownFocus = function () {\n            _this.cancelFocusInput();\n        };\n        _this.handleBlur = function (event) {\n            var _a, _b;\n            if (!_this.state.open || _this.props.withPortal || _this.props.showTimeInput) {\n                (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            }\n            _this.setState({ focused: false });\n        };\n        _this.handleCalendarClickOutside = function (event) {\n            var _a, _b;\n            if (!_this.props.inline) {\n                _this.setOpen(false);\n            }\n            (_b = (_a = _this.props).onClickOutside) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            if (_this.props.withPortal) {\n                event.preventDefault();\n            }\n        };\n        _this.handleChange = function () {\n            var allArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                allArgs[_i] = arguments[_i];\n            }\n            var event = allArgs[0];\n            if (_this.props.onChangeRaw) {\n                _this.props.onChangeRaw.apply(_this, allArgs);\n                if (!event ||\n                    typeof event.isDefaultPrevented !== \"function\" ||\n                    event.isDefaultPrevented()) {\n                    return;\n                }\n            }\n            _this.setState({\n                inputValue: (event === null || event === void 0 ? void 0 : event.target) instanceof HTMLInputElement ? event.target.value : null,\n                lastPreSelectChange: PRESELECT_CHANGE_VIA_INPUT,\n            });\n            var _a = _this.props, _b = _a.dateFormat, dateFormat = _b === void 0 ? DatePicker.defaultProps.dateFormat : _b, _c = _a.strictParsing, strictParsing = _c === void 0 ? DatePicker.defaultProps.strictParsing : _c;\n            var date = parseDate((event === null || event === void 0 ? void 0 : event.target) instanceof HTMLInputElement ? event.target.value : \"\", dateFormat, _this.props.locale, strictParsing, _this.props.minDate);\n            // Use date from `selected` prop when manipulating only time for input value\n            if (_this.props.showTimeSelectOnly &&\n                _this.props.selected &&\n                date &&\n                !isSameDay(date, _this.props.selected)) {\n                date = (0,date_fns_set__WEBPACK_IMPORTED_MODULE_64__.set)(_this.props.selected, {\n                    hours: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(date),\n                    minutes: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(date),\n                    seconds: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(date),\n                });\n            }\n            if (date ||\n                !((event === null || event === void 0 ? void 0 : event.target) instanceof HTMLInputElement) ||\n                !(event === null || event === void 0 ? void 0 : event.target.value)) {\n                _this.setSelected(date, event, true);\n            }\n        };\n        _this.handleSelect = function (date, event, monthSelectedIn) {\n            if (_this.props.shouldCloseOnSelect && !_this.props.showTimeSelect) {\n                // Preventing onFocus event to fix issue\n                // https://github.com/Hacker0x01/react-datepicker/issues/628\n                _this.sendFocusBackToInput();\n            }\n            if (_this.props.onChangeRaw) {\n                _this.props.onChangeRaw(event);\n            }\n            _this.setSelected(date, event, false, monthSelectedIn);\n            if (_this.props.showDateSelect) {\n                _this.setState({ isRenderAriaLiveMessage: true });\n            }\n            if (!_this.props.shouldCloseOnSelect || _this.props.showTimeSelect) {\n                _this.setPreSelection(date);\n            }\n            else if (!_this.props.inline) {\n                if (!_this.props.selectsRange) {\n                    _this.setOpen(false);\n                }\n                var _a = _this.props, startDate = _a.startDate, endDate = _a.endDate;\n                if (startDate &&\n                    !endDate &&\n                    (_this.props.swapRange || !isDateBefore(date, startDate))) {\n                    _this.setOpen(false);\n                }\n            }\n        };\n        _this.setSelected = function (date, event, keepInput, monthSelectedIn) {\n            var changedDate = date;\n            if (_this.props.showYearPicker) {\n                if (changedDate !== null &&\n                    isYearDisabled((0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(changedDate), _this.props)) {\n                    return;\n                }\n            }\n            else if (_this.props.showMonthYearPicker) {\n                if (changedDate !== null && isMonthDisabled(changedDate, _this.props)) {\n                    return;\n                }\n            }\n            else {\n                if (changedDate !== null && isDayDisabled(changedDate, _this.props)) {\n                    return;\n                }\n            }\n            var _a = _this.props, onChange = _a.onChange, selectsRange = _a.selectsRange, startDate = _a.startDate, endDate = _a.endDate, selectsMultiple = _a.selectsMultiple, selectedDates = _a.selectedDates, minTime = _a.minTime, swapRange = _a.swapRange;\n            if (!isEqual(_this.props.selected, changedDate) ||\n                _this.props.allowSameDay ||\n                selectsRange ||\n                selectsMultiple) {\n                if (changedDate !== null) {\n                    if (_this.props.selected &&\n                        (!keepInput ||\n                            (!_this.props.showTimeSelect &&\n                                !_this.props.showTimeSelectOnly &&\n                                !_this.props.showTimeInput))) {\n                        changedDate = setTime(changedDate, {\n                            hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(_this.props.selected),\n                            minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(_this.props.selected),\n                            second: (0,date_fns_getSeconds__WEBPACK_IMPORTED_MODULE_38__.getSeconds)(_this.props.selected),\n                        });\n                    }\n                    // If minTime is present then set the time to minTime\n                    if (!keepInput &&\n                        (_this.props.showTimeSelect || _this.props.showTimeSelectOnly)) {\n                        if (minTime) {\n                            changedDate = setTime(changedDate, {\n                                hour: minTime.getHours(),\n                                minute: minTime.getMinutes(),\n                                second: minTime.getSeconds(),\n                            });\n                        }\n                    }\n                    if (!_this.props.inline) {\n                        _this.setState({\n                            preSelection: changedDate,\n                        });\n                    }\n                    if (!_this.props.focusSelectedMonth) {\n                        _this.setState({ monthSelectedIn: monthSelectedIn });\n                    }\n                }\n                if (selectsRange) {\n                    var noRanges = !startDate && !endDate;\n                    var hasStartRange = startDate && !endDate;\n                    var isRangeFilled = startDate && endDate;\n                    if (noRanges) {\n                        onChange([changedDate, null], event);\n                    }\n                    else if (hasStartRange) {\n                        if (changedDate === null) {\n                            onChange([null, null], event);\n                        }\n                        else if (isDateBefore(changedDate, startDate)) {\n                            if (swapRange) {\n                                onChange([changedDate, startDate], event);\n                            }\n                            else {\n                                onChange([changedDate, null], event);\n                            }\n                        }\n                        else {\n                            onChange([startDate, changedDate], event);\n                        }\n                    }\n                    if (isRangeFilled) {\n                        onChange([changedDate, null], event);\n                    }\n                }\n                else if (selectsMultiple) {\n                    if (changedDate !== null) {\n                        if (!(selectedDates === null || selectedDates === void 0 ? void 0 : selectedDates.length)) {\n                            onChange([changedDate], event);\n                        }\n                        else {\n                            var isChangedDateAlreadySelected = selectedDates.some(function (selectedDate) { return isSameDay(selectedDate, changedDate); });\n                            if (isChangedDateAlreadySelected) {\n                                var nextDates = selectedDates.filter(function (selectedDate) { return !isSameDay(selectedDate, changedDate); });\n                                onChange(nextDates, event);\n                            }\n                            else {\n                                onChange(__spreadArray(__spreadArray([], selectedDates, true), [changedDate], false), event);\n                            }\n                        }\n                    }\n                }\n                else {\n                    onChange(changedDate, event);\n                }\n            }\n            if (!keepInput) {\n                _this.props.onSelect(changedDate, event);\n                _this.setState({ inputValue: null });\n            }\n        };\n        // When checking preSelection via min/maxDate, times need to be manipulated via getStartOfDay/getEndOfDay\n        _this.setPreSelection = function (date) {\n            var hasMinDate = (0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(_this.props.minDate);\n            var hasMaxDate = (0,date_fns_isDate__WEBPACK_IMPORTED_MODULE_50__.isDate)(_this.props.maxDate);\n            var isValidDateSelection = true;\n            if (date) {\n                var dateStartOfDay = getStartOfDay(date);\n                if (hasMinDate && hasMaxDate) {\n                    // isDayInRange uses getStartOfDay internally, so not necessary to manipulate times here\n                    isValidDateSelection = isDayInRange(date, _this.props.minDate, _this.props.maxDate);\n                }\n                else if (hasMinDate) {\n                    var minDateStartOfDay = getStartOfDay(_this.props.minDate);\n                    isValidDateSelection =\n                        (0,date_fns_isAfter__WEBPACK_IMPORTED_MODULE_54__.isAfter)(date, minDateStartOfDay) ||\n                            isEqual(dateStartOfDay, minDateStartOfDay);\n                }\n                else if (hasMaxDate) {\n                    var maxDateEndOfDay = getEndOfDay(_this.props.maxDate);\n                    isValidDateSelection =\n                        (0,date_fns_isBefore__WEBPACK_IMPORTED_MODULE_9__.isBefore)(date, maxDateEndOfDay) ||\n                            isEqual(dateStartOfDay, maxDateEndOfDay);\n                }\n            }\n            if (isValidDateSelection) {\n                _this.setState({\n                    preSelection: date,\n                });\n            }\n        };\n        _this.toggleCalendar = function () {\n            _this.setOpen(!_this.state.open);\n        };\n        _this.handleTimeChange = function (time) {\n            if (_this.props.selectsRange || _this.props.selectsMultiple) {\n                return;\n            }\n            var selected = _this.props.selected\n                ? _this.props.selected\n                : _this.getPreSelection();\n            var changedDate = _this.props.selected\n                ? time\n                : setTime(selected, {\n                    hour: (0,date_fns_getHours__WEBPACK_IMPORTED_MODULE_36__.getHours)(time),\n                    minute: (0,date_fns_getMinutes__WEBPACK_IMPORTED_MODULE_37__.getMinutes)(time),\n                });\n            _this.setState({\n                preSelection: changedDate,\n            });\n            _this.props.onChange(changedDate);\n            if (_this.props.shouldCloseOnSelect && !_this.props.showTimeInput) {\n                _this.sendFocusBackToInput();\n                _this.setOpen(false);\n            }\n            if (_this.props.showTimeInput) {\n                _this.setOpen(true);\n            }\n            if (_this.props.showTimeSelectOnly || _this.props.showTimeSelect) {\n                _this.setState({ isRenderAriaLiveMessage: true });\n            }\n            _this.setState({ inputValue: null });\n        };\n        _this.onInputClick = function () {\n            var _a, _b;\n            if (!_this.props.disabled && !_this.props.readOnly) {\n                _this.setOpen(true);\n            }\n            (_b = (_a = _this.props).onInputClick) === null || _b === void 0 ? void 0 : _b.call(_a);\n        };\n        _this.onInputKeyDown = function (event) {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            var eventKey = event.key;\n            if (!_this.state.open &&\n                !_this.props.inline &&\n                !_this.props.preventOpenOnFocus) {\n                if (eventKey === KeyType.ArrowDown ||\n                    eventKey === KeyType.ArrowUp ||\n                    eventKey === KeyType.Enter) {\n                    _this.onInputClick();\n                }\n                return;\n            }\n            // if calendar is open, these keys will focus the selected item\n            if (_this.state.open) {\n                if (eventKey === KeyType.ArrowDown || eventKey === KeyType.ArrowUp) {\n                    event.preventDefault();\n                    var selectorString = _this.props.showTimeSelectOnly\n                        ? \".react-datepicker__time-list-item[tabindex='0']\"\n                        : _this.props.showWeekPicker && _this.props.showWeekNumbers\n                            ? '.react-datepicker__week-number[tabindex=\"0\"]'\n                            : _this.props.showFullMonthYearPicker ||\n                                _this.props.showMonthYearPicker\n                                ? '.react-datepicker__month-text[tabindex=\"0\"]'\n                                : '.react-datepicker__day[tabindex=\"0\"]';\n                    var selectedItem = ((_c = _this.calendar) === null || _c === void 0 ? void 0 : _c.componentNode) instanceof Element &&\n                        _this.calendar.componentNode.querySelector(selectorString);\n                    selectedItem instanceof HTMLElement &&\n                        selectedItem.focus({ preventScroll: true });\n                    return;\n                }\n                var copy = newDate(_this.state.preSelection);\n                if (eventKey === KeyType.Enter) {\n                    event.preventDefault();\n                    if (_this.inputOk() &&\n                        _this.state.lastPreSelectChange === PRESELECT_CHANGE_VIA_NAVIGATE) {\n                        _this.handleSelect(copy, event);\n                        !_this.props.shouldCloseOnSelect && _this.setPreSelection(copy);\n                    }\n                    else {\n                        _this.setOpen(false);\n                    }\n                }\n                else if (eventKey === KeyType.Escape) {\n                    event.preventDefault();\n                    _this.sendFocusBackToInput();\n                    _this.setOpen(false);\n                }\n                else if (eventKey === KeyType.Tab) {\n                    _this.setOpen(false);\n                }\n                if (!_this.inputOk()) {\n                    (_e = (_d = _this.props).onInputError) === null || _e === void 0 ? void 0 : _e.call(_d, { code: 1, msg: INPUT_ERR_1 });\n                }\n            }\n        };\n        _this.onPortalKeyDown = function (event) {\n            var eventKey = event.key;\n            if (eventKey === KeyType.Escape) {\n                event.preventDefault();\n                _this.setState({\n                    preventFocus: true,\n                }, function () {\n                    _this.setOpen(false);\n                    setTimeout(function () {\n                        _this.setFocus();\n                        _this.setState({ preventFocus: false });\n                    });\n                });\n            }\n        };\n        // keyDown events passed down to day.jsx\n        _this.onDayKeyDown = function (event) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, minDate = _e.minDate, maxDate = _e.maxDate, disabledKeyboardNavigation = _e.disabledKeyboardNavigation, showWeekPicker = _e.showWeekPicker, shouldCloseOnSelect = _e.shouldCloseOnSelect, locale = _e.locale, calendarStartDay = _e.calendarStartDay, adjustDateOnChange = _e.adjustDateOnChange, inline = _e.inline;\n            (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n            if (disabledKeyboardNavigation)\n                return;\n            var eventKey = event.key;\n            var isShiftKeyActive = event.shiftKey;\n            var copy = newDate(_this.state.preSelection);\n            var calculateNewDate = function (eventKey, date) {\n                var newCalculatedDate = date;\n                switch (eventKey) {\n                    case KeyType.ArrowRight:\n                        newCalculatedDate = showWeekPicker\n                            ? (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_58__.addWeeks)(date, 1)\n                            : (0,date_fns_addDays__WEBPACK_IMPORTED_MODULE_57__.addDays)(date, 1);\n                        break;\n                    case KeyType.ArrowLeft:\n                        newCalculatedDate = showWeekPicker\n                            ? (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(date, 1)\n                            : (0,date_fns_subDays__WEBPACK_IMPORTED_MODULE_66__.subDays)(date, 1);\n                        break;\n                    case KeyType.ArrowUp:\n                        newCalculatedDate = (0,date_fns_subWeeks__WEBPACK_IMPORTED_MODULE_65__.subWeeks)(date, 1);\n                        break;\n                    case KeyType.ArrowDown:\n                        newCalculatedDate = (0,date_fns_addWeeks__WEBPACK_IMPORTED_MODULE_58__.addWeeks)(date, 1);\n                        break;\n                    case KeyType.PageUp:\n                        newCalculatedDate = isShiftKeyActive\n                            ? (0,date_fns_subYears__WEBPACK_IMPORTED_MODULE_45__.subYears)(date, 1)\n                            : (0,date_fns_subMonths__WEBPACK_IMPORTED_MODULE_39__.subMonths)(date, 1);\n                        break;\n                    case KeyType.PageDown:\n                        newCalculatedDate = isShiftKeyActive\n                            ? (0,date_fns_addYears__WEBPACK_IMPORTED_MODULE_47__.addYears)(date, 1)\n                            : (0,date_fns_addMonths__WEBPACK_IMPORTED_MODULE_41__.addMonths)(date, 1);\n                        break;\n                    case KeyType.Home:\n                        newCalculatedDate = getStartOfWeek(date, locale, calendarStartDay);\n                        break;\n                    case KeyType.End:\n                        newCalculatedDate = getEndOfWeek(date);\n                        break;\n                }\n                return newCalculatedDate;\n            };\n            var getNewDate = function (eventKey, date) {\n                var MAX_ITERATIONS = 40;\n                var eventKeyCopy = eventKey;\n                var validDateFound = false;\n                var iterations = 0;\n                var newSelection = calculateNewDate(eventKey, date);\n                while (!validDateFound) {\n                    if (iterations >= MAX_ITERATIONS) {\n                        newSelection = date;\n                        break;\n                    }\n                    // if minDate exists and the new selection is before the min date, get the nearest date that isn't disabled\n                    if (minDate && newSelection < minDate) {\n                        eventKeyCopy = KeyType.ArrowRight;\n                        newSelection = isDayDisabled(minDate, _this.props)\n                            ? calculateNewDate(eventKeyCopy, newSelection)\n                            : minDate;\n                    }\n                    // if maxDate exists and the new selection is after the max date, get the nearest date that isn't disabled\n                    if (maxDate && newSelection > maxDate) {\n                        eventKeyCopy = KeyType.ArrowLeft;\n                        newSelection = isDayDisabled(maxDate, _this.props)\n                            ? calculateNewDate(eventKeyCopy, newSelection)\n                            : maxDate;\n                    }\n                    if (isDayDisabled(newSelection, _this.props)) {\n                        // if PageUp and Home is pressed to a disabled date, it will try to find the next available date after\n                        if (eventKeyCopy === KeyType.PageUp ||\n                            eventKeyCopy === KeyType.Home) {\n                            eventKeyCopy = KeyType.ArrowRight;\n                        }\n                        // if PageDown and End is pressed to a disabled date, it will try to find the next available date before\n                        if (eventKeyCopy === KeyType.PageDown ||\n                            eventKeyCopy === KeyType.End) {\n                            eventKeyCopy = KeyType.ArrowLeft;\n                        }\n                        newSelection = calculateNewDate(eventKeyCopy, newSelection);\n                    }\n                    else {\n                        validDateFound = true;\n                    }\n                    iterations++;\n                }\n                return newSelection;\n            };\n            if (eventKey === KeyType.Enter) {\n                event.preventDefault();\n                _this.handleSelect(copy, event);\n                !shouldCloseOnSelect && _this.setPreSelection(copy);\n                return;\n            }\n            else if (eventKey === KeyType.Escape) {\n                event.preventDefault();\n                _this.setOpen(false);\n                if (!_this.inputOk()) {\n                    (_d = (_c = _this.props).onInputError) === null || _d === void 0 ? void 0 : _d.call(_c, { code: 1, msg: INPUT_ERR_1 });\n                }\n                return;\n            }\n            var newSelection = null;\n            switch (eventKey) {\n                case KeyType.ArrowLeft:\n                case KeyType.ArrowRight:\n                case KeyType.ArrowUp:\n                case KeyType.ArrowDown:\n                case KeyType.PageUp:\n                case KeyType.PageDown:\n                case KeyType.Home:\n                case KeyType.End:\n                    newSelection = getNewDate(eventKey, copy);\n                    break;\n            }\n            if (!newSelection) {\n                if (_this.props.onInputError) {\n                    _this.props.onInputError({ code: 1, msg: INPUT_ERR_1 });\n                }\n                return;\n            }\n            event.preventDefault();\n            _this.setState({ lastPreSelectChange: PRESELECT_CHANGE_VIA_NAVIGATE });\n            if (adjustDateOnChange) {\n                _this.setSelected(newSelection);\n            }\n            _this.setPreSelection(newSelection);\n            // need to figure out whether month has changed to focus day in inline version\n            if (inline) {\n                var prevMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(copy);\n                var newMonth = (0,date_fns_getMonth__WEBPACK_IMPORTED_MODULE_32__.getMonth)(newSelection);\n                var prevYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(copy);\n                var newYear = (0,date_fns_getYear__WEBPACK_IMPORTED_MODULE_31__.getYear)(newSelection);\n                if (prevMonth !== newMonth || prevYear !== newYear) {\n                    // month has changed\n                    _this.setState({ shouldFocusDayInline: true });\n                }\n                else {\n                    // month hasn't changed\n                    _this.setState({ shouldFocusDayInline: false });\n                }\n            }\n        };\n        // handle generic key down events in the popper that do not adjust or select dates\n        // ex: while focusing prev and next month buttons\n        _this.onPopperKeyDown = function (event) {\n            var eventKey = event.key;\n            if (eventKey === KeyType.Escape) {\n                event.preventDefault();\n                _this.sendFocusBackToInput();\n            }\n        };\n        _this.onClearClick = function (event) {\n            if (event) {\n                if (event.preventDefault) {\n                    event.preventDefault();\n                }\n            }\n            _this.sendFocusBackToInput();\n            var _a = _this.props, selectsRange = _a.selectsRange, onChange = _a.onChange;\n            if (selectsRange) {\n                onChange([null, null], event);\n            }\n            else {\n                onChange(null, event);\n            }\n            if (_this.props.selectsRange) {\n                _this.props.onChange([null, null], event);\n            }\n            else {\n                _this.props.onChange(null, event);\n            }\n            _this.setState({ inputValue: null });\n        };\n        _this.clear = function () {\n            _this.onClearClick();\n        };\n        _this.onScroll = function (event) {\n            if (typeof _this.props.closeOnScroll === \"boolean\" &&\n                _this.props.closeOnScroll) {\n                if (event.target === document ||\n                    event.target === document.documentElement ||\n                    event.target === document.body) {\n                    _this.setOpen(false);\n                }\n            }\n            else if (typeof _this.props.closeOnScroll === \"function\") {\n                if (_this.props.closeOnScroll(event)) {\n                    _this.setOpen(false);\n                }\n            }\n        };\n        _this.renderCalendar = function () {\n            var _a, _b;\n            if (!_this.props.inline && !_this.isCalendarOpen()) {\n                return null;\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(WrappedCalendar, _assign({ ref: function (elem) {\n                    _this.calendar = elem;\n                } }, _this.props, _this.state, { setOpen: _this.setOpen, dateFormat: (_a = _this.props.dateFormatCalendar) !== null && _a !== void 0 ? _a : DatePicker.defaultProps.dateFormatCalendar, onSelect: _this.handleSelect, onClickOutside: _this.handleCalendarClickOutside, holidays: getHolidaysMap(_this.modifyHolidays()), outsideClickIgnoreClass: outsideClickIgnoreClass, onDropdownFocus: _this.handleDropdownFocus, onTimeChange: _this.handleTimeChange, className: _this.props.calendarClassName, container: _this.props.calendarContainer, handleOnKeyDown: _this.props.onKeyDown, handleOnDayKeyDown: _this.onDayKeyDown, setPreSelection: _this.setPreSelection, dropdownMode: (_b = _this.props.dropdownMode) !== null && _b !== void 0 ? _b : DatePicker.defaultProps.dropdownMode }), _this.props.children));\n        };\n        _this.renderAriaLiveRegion = function () {\n            var _a = _this.props, _b = _a.dateFormat, dateFormat = _b === void 0 ? DatePicker.defaultProps.dateFormat : _b, locale = _a.locale;\n            var isContainsTime = _this.props.showTimeInput || _this.props.showTimeSelect;\n            var longDateFormat = isContainsTime ? \"PPPPp\" : \"PPPP\";\n            var ariaLiveMessage;\n            if (_this.props.selectsRange) {\n                ariaLiveMessage = \"Selected start date: \".concat(safeDateFormat(_this.props.startDate, {\n                    dateFormat: longDateFormat,\n                    locale: locale,\n                }), \". \").concat(_this.props.endDate\n                    ? \"End date: \" +\n                        safeDateFormat(_this.props.endDate, {\n                            dateFormat: longDateFormat,\n                            locale: locale,\n                        })\n                    : \"\");\n            }\n            else {\n                if (_this.props.showTimeSelectOnly) {\n                    ariaLiveMessage = \"Selected time: \".concat(safeDateFormat(_this.props.selected, { dateFormat: dateFormat, locale: locale }));\n                }\n                else if (_this.props.showYearPicker) {\n                    ariaLiveMessage = \"Selected year: \".concat(safeDateFormat(_this.props.selected, { dateFormat: \"yyyy\", locale: locale }));\n                }\n                else if (_this.props.showMonthYearPicker) {\n                    ariaLiveMessage = \"Selected month: \".concat(safeDateFormat(_this.props.selected, { dateFormat: \"MMMM yyyy\", locale: locale }));\n                }\n                else if (_this.props.showQuarterYearPicker) {\n                    ariaLiveMessage = \"Selected quarter: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: \"yyyy, QQQ\",\n                        locale: locale,\n                    }));\n                }\n                else {\n                    ariaLiveMessage = \"Selected date: \".concat(safeDateFormat(_this.props.selected, {\n                        dateFormat: longDateFormat,\n                        locale: locale,\n                    }));\n                }\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", { role: \"alert\", \"aria-live\": \"polite\", className: \"react-datepicker__aria-live\" }, ariaLiveMessage));\n        };\n        _this.renderDateInput = function () {\n            var _a, _b;\n            var _c;\n            var className = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(_this.props.className, (_a = {},\n                _a[outsideClickIgnoreClass] = _this.state.open,\n                _a));\n            var customInput = _this.props.customInput || react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"input\", { type: \"text\" });\n            var customInputRef = _this.props.customInputRef || \"ref\";\n            var _d = _this.props, _e = _d.dateFormat, dateFormat = _e === void 0 ? DatePicker.defaultProps.dateFormat : _e, locale = _d.locale;\n            var inputValue = typeof _this.props.value === \"string\"\n                ? _this.props.value\n                : typeof _this.state.inputValue === \"string\"\n                    ? _this.state.inputValue\n                    : _this.props.selectsRange\n                        ? safeDateRangeFormat(_this.props.startDate, _this.props.endDate, {\n                            dateFormat: dateFormat,\n                            locale: locale,\n                        })\n                        : _this.props.selectsMultiple\n                            ? safeMultipleDatesFormat((_c = _this.props.selectedDates) !== null && _c !== void 0 ? _c : [], {\n                                dateFormat: dateFormat,\n                                locale: locale,\n                            })\n                            : safeDateFormat(_this.props.selected, {\n                                dateFormat: dateFormat,\n                                locale: locale,\n                            });\n            return (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(customInput, (_b = {},\n                _b[customInputRef] = function (input) {\n                    _this.input = input;\n                },\n                _b.value = inputValue,\n                _b.onBlur = _this.handleBlur,\n                _b.onChange = _this.handleChange,\n                _b.onClick = _this.onInputClick,\n                _b.onFocus = _this.handleFocus,\n                _b.onKeyDown = _this.onInputKeyDown,\n                _b.id = _this.props.id,\n                _b.name = _this.props.name,\n                _b.form = _this.props.form,\n                _b.autoFocus = _this.props.autoFocus,\n                _b.placeholder = _this.props.placeholderText,\n                _b.disabled = _this.props.disabled,\n                _b.autoComplete = _this.props.autoComplete,\n                _b.className = (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(customInput.props.className, className),\n                _b.title = _this.props.title,\n                _b.readOnly = _this.props.readOnly,\n                _b.required = _this.props.required,\n                _b.tabIndex = _this.props.tabIndex,\n                _b[\"aria-describedby\"] = _this.props.ariaDescribedBy,\n                _b[\"aria-invalid\"] = _this.props.ariaInvalid,\n                _b[\"aria-labelledby\"] = _this.props.ariaLabelledBy,\n                _b[\"aria-required\"] = _this.props.ariaRequired,\n                _b));\n        };\n        _this.renderClearButton = function () {\n            var _a = _this.props, isClearable = _a.isClearable, disabled = _a.disabled, selected = _a.selected, startDate = _a.startDate, endDate = _a.endDate, clearButtonTitle = _a.clearButtonTitle, _b = _a.clearButtonClassName, clearButtonClassName = _b === void 0 ? \"\" : _b, _c = _a.ariaLabelClose, ariaLabelClose = _c === void 0 ? \"Close\" : _c, selectedDates = _a.selectedDates;\n            if (isClearable &&\n                (selected != null ||\n                    startDate != null ||\n                    endDate != null ||\n                    (selectedDates === null || selectedDates === void 0 ? void 0 : selectedDates.length))) {\n                return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", { type: \"button\", className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(\"react-datepicker__close-icon\", clearButtonClassName, { \"react-datepicker__close-icon--disabled\": disabled }), disabled: disabled, \"aria-label\": ariaLabelClose, onClick: _this.onClearClick, title: clearButtonTitle, tabIndex: -1 }));\n            }\n            else {\n                return null;\n            }\n        };\n        _this.state = _this.calcInitialState();\n        _this.preventFocusTimeout = undefined;\n        return _this;\n    }\n    Object.defineProperty(DatePicker, \"defaultProps\", {\n        get: function () {\n            return {\n                allowSameDay: false,\n                dateFormat: \"MM/dd/yyyy\",\n                dateFormatCalendar: \"LLLL yyyy\",\n                onChange: function () { },\n                disabled: false,\n                disabledKeyboardNavigation: false,\n                dropdownMode: \"scroll\",\n                onFocus: function () { },\n                onBlur: function () { },\n                onKeyDown: function () { },\n                onInputClick: function () { },\n                onSelect: function () { },\n                onClickOutside: function () { },\n                onMonthChange: function () { },\n                onCalendarOpen: function () { },\n                onCalendarClose: function () { },\n                preventOpenOnFocus: false,\n                onYearChange: function () { },\n                onInputError: function () { },\n                monthsShown: 1,\n                readOnly: false,\n                withPortal: false,\n                selectsDisabledDaysInRange: false,\n                shouldCloseOnSelect: true,\n                showTimeSelect: false,\n                showTimeInput: false,\n                showPreviousMonths: false,\n                showMonthYearPicker: false,\n                showFullMonthYearPicker: false,\n                showTwoColumnMonthYearPicker: false,\n                showFourColumnMonthYearPicker: false,\n                showYearPicker: false,\n                showQuarterYearPicker: false,\n                showWeekPicker: false,\n                strictParsing: false,\n                swapRange: false,\n                timeIntervals: 30,\n                timeCaption: \"Time\",\n                previousMonthAriaLabel: \"Previous Month\",\n                previousMonthButtonLabel: \"Previous Month\",\n                nextMonthAriaLabel: \"Next Month\",\n                nextMonthButtonLabel: \"Next Month\",\n                previousYearAriaLabel: \"Previous Year\",\n                previousYearButtonLabel: \"Previous Year\",\n                nextYearAriaLabel: \"Next Year\",\n                nextYearButtonLabel: \"Next Year\",\n                timeInputLabel: \"Time\",\n                enableTabLoop: true,\n                yearItemNumber: DEFAULT_YEAR_ITEM_NUMBER,\n                focusSelectedMonth: false,\n                showPopperArrow: true,\n                excludeScrollbar: true,\n                customTimeInput: null,\n                calendarStartDay: undefined,\n                toggleCalendarOnIconClick: false,\n                usePointerEvent: false,\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DatePicker.prototype.componentDidMount = function () {\n        window.addEventListener(\"scroll\", this.onScroll, true);\n        document.addEventListener(\"visibilitychange\", this.setHiddenStateOnVisibilityHidden);\n    };\n    DatePicker.prototype.componentDidUpdate = function (prevProps, prevState) {\n        var _a, _b, _c, _d;\n        if (prevProps.inline &&\n            hasPreSelectionChanged(prevProps.selected, this.props.selected)) {\n            this.setPreSelection(this.props.selected);\n        }\n        if (this.state.monthSelectedIn !== undefined &&\n            prevProps.monthsShown !== this.props.monthsShown) {\n            this.setState({ monthSelectedIn: 0 });\n        }\n        if (prevProps.highlightDates !== this.props.highlightDates) {\n            this.setState({\n                highlightDates: getHighLightDaysMap(this.props.highlightDates),\n            });\n        }\n        if (!prevState.focused &&\n            !isEqual(prevProps.selected, this.props.selected)) {\n            this.setState({ inputValue: null });\n        }\n        if (prevState.open !== this.state.open) {\n            if (prevState.open === false && this.state.open === true) {\n                (_b = (_a = this.props).onCalendarOpen) === null || _b === void 0 ? void 0 : _b.call(_a);\n            }\n            if (prevState.open === true && this.state.open === false) {\n                (_d = (_c = this.props).onCalendarClose) === null || _d === void 0 ? void 0 : _d.call(_c);\n            }\n        }\n    };\n    DatePicker.prototype.componentWillUnmount = function () {\n        this.clearPreventFocusTimeout();\n        window.removeEventListener(\"scroll\", this.onScroll, true);\n        document.removeEventListener(\"visibilitychange\", this.setHiddenStateOnVisibilityHidden);\n    };\n    DatePicker.prototype.renderInputContainer = function () {\n        var _a = this.props, showIcon = _a.showIcon, icon = _a.icon, calendarIconClassname = _a.calendarIconClassname, calendarIconClassName = _a.calendarIconClassName, toggleCalendarOnIconClick = _a.toggleCalendarOnIconClick;\n        var open = this.state.open;\n        if (calendarIconClassname) {\n            console.warn(\"calendarIconClassname props is deprecated. should use calendarIconClassName props.\");\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__input-container\".concat(showIcon ? \" react-datepicker__view-calendar-icon\" : \"\") },\n            showIcon && (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CalendarIcon, _assign({ icon: icon, className: (0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(calendarIconClassName, !calendarIconClassName && calendarIconClassname, open && \"react-datepicker-ignore-onclickoutside\") }, (toggleCalendarOnIconClick\n                ? {\n                    onClick: this.toggleCalendar,\n                }\n                : null)))),\n            this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(),\n            this.renderDateInput(),\n            this.renderClearButton()));\n    };\n    DatePicker.prototype.render = function () {\n        var calendar = this.renderCalendar();\n        if (this.props.inline)\n            return calendar;\n        if (this.props.withPortal) {\n            var portalContainer = this.state.open ? (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(TabLoop, { enableTabLoop: this.props.enableTabLoop },\n                react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: \"react-datepicker__portal\", tabIndex: -1, onKeyDown: this.onPortalKeyDown }, calendar))) : null;\n            if (this.state.open && this.props.portalId) {\n                portalContainer = (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Portal, _assign({ portalId: this.props.portalId }, this.props), portalContainer));\n            }\n            return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", null,\n                this.renderInputContainer(),\n                portalContainer));\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PopperComponent$1, _assign({}, this.props, { className: this.props.popperClassName, hidePopper: !this.isCalendarOpen(), targetComponent: this.renderInputContainer(), popperComponent: calendar, popperOnKeyDown: this.onPopperKeyDown, showArrow: this.props.showPopperArrow })));\n    };\n    return DatePicker;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component));\nvar PRESELECT_CHANGE_VIA_INPUT = \"input\";\nvar PRESELECT_CHANGE_VIA_NAVIGATE = \"navigate\";\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css":
/*!*****************************************************************!*\
  !*** ./node_modules/react-datepicker/dist/react-datepicker.css ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"3b33ca26d6da\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamFja3NoZW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXBpY2tlci9kaXN0L3JlYWN0LWRhdGVwaWNrZXIuY3NzPzg2OWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIzYjMzY2EyNmQ2ZGFcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datepicker/dist/react-datepicker.css\n");

/***/ })

};
;